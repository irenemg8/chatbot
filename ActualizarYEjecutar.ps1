#Requires -Version 5.1
<#
.SYNOPSIS
    üöÄ CHATBOT GOMARCO - Enterprise Auto-Updater PowerShell Edition
    
.DESCRIPTION
    Script empresarial avanzado para automatizar la actualizaci√≥n y ejecuci√≥n
    del Chatbot GOMARCO con caracter√≠sticas enterprise-grade.
    
.PARAMETER ConfigurationType
    Tipo de configuraci√≥n de build (Debug/Release)
    
.PARAMETER SkipGitPull
    Omite la actualizaci√≥n desde Git
    
.PARAMETER Verbose
    Muestra informaci√≥n detallada del proceso
    
.EXAMPLE
    .\ActualizarYEjecutar.ps1
    
.EXAMPLE
    .\ActualizarYEjecutar.ps1 -ConfigurationType Release -Verbose
    
.NOTES
    Versi√≥n: 2.0 Enterprise
    Desarrollado por: DevOps Team GOMARCO
    Requisitos: .NET 8 SDK, PowerShell 5.1+
#>

[CmdletBinding()]
param(
    [Parameter(Mandatory=$false)]
    [ValidateSet("Debug", "Release")]
    [string]$ConfigurationType = "Debug",
    
    [Parameter(Mandatory=$false)]
    [switch]$SkipGitPull,
    
    [Parameter(Mandatory=$false)]
    [switch]$ForceRecompile
)

# ====================================================================
# CONFIGURACI√ìN EMPRESARIAL
# ====================================================================
$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"

$Config = @{
    ProjectName = "ChatbotGomarco"
    SolutionFile = "chatbot.sln"
    ProjectFile = "ChatbotGomarco.csproj"
    BuildConfig = $ConfigurationType
    LogDirectory = "logs"
    MaxLogFiles = 10
}

# ====================================================================
# FUNCIONES UTILITARIAS ENTERPRISE
# ====================================================================

function Write-LogMessage {
    param(
        [Parameter(Mandatory=$true)]
        [string]$Message,
        
        [Parameter(Mandatory=$false)]
        [ValidateSet("INFO", "WARN", "ERROR", "SUCCESS")]
        [string]$Level = "INFO"
    )
    
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logEntry = "[$timestamp] [$Level] $Message"
    
    # Color coding for console
    switch ($Level) {
        "INFO"    { Write-Host $logEntry -ForegroundColor Cyan }
        "WARN"    { Write-Host $logEntry -ForegroundColor Yellow }
        "ERROR"   { Write-Host $logEntry -ForegroundColor Red }
        "SUCCESS" { Write-Host $logEntry -ForegroundColor Green }
    }
    
    # Write to log file
    $logEntry | Add-Content -Path $script:LogFile -Encoding UTF8
}

function Test-Prerequisites {
    Write-LogMessage "üîç Verificando prerrequisitos del sistema..." -Level INFO
    
    # Verificar .NET SDK
    try {
        $dotnetVersion = & dotnet --version 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-LogMessage "‚úÖ .NET SDK detectado: $dotnetVersion" -Level SUCCESS
        } else {
            throw "No se detect√≥ .NET SDK"
        }
    }
    catch {
        Write-LogMessage "‚ùå .NET 8 SDK no est√° instalado" -Level ERROR
        throw
    }
    
    # Verificar archivos del proyecto
    @($Config.SolutionFile, $Config.ProjectFile) | ForEach-Object {
        if (-not (Test-Path $_)) {
            Write-LogMessage "‚ùå Archivo requerido no encontrado: $_" -Level ERROR
            throw "Archivo del proyecto faltante: $_"
        }
    }
    
    Write-LogMessage "‚úÖ Todos los prerrequisitos verificados" -Level SUCCESS
}

function Update-SourceCode {
    if ($SkipGitPull) {
        Write-LogMessage "‚è≠Ô∏è  Omitiendo actualizaci√≥n Git (par√°metro -SkipGitPull)" -Level WARN
        return
    }
    
    Write-LogMessage "üîÑ Verificando actualizaciones del repositorio Git..." -Level INFO
    
    # Verificar si Git est√° disponible
    try {
        $gitVersion = & git --version 2>$null
        if ($LASTEXITCODE -ne 0) {
            Write-LogMessage "‚ö†Ô∏è  Git no disponible - usando c√≥digo local" -Level WARN
            return
        }
    }
    catch {
        Write-LogMessage "‚ö†Ô∏è  Git no disponible - usando c√≥digo local" -Level WARN
        return
    }
    
    try {
        # Primero hacer fetch para ver si hay actualizaciones remotas
        Write-LogMessage "    ‚îî‚îÄ Verificando actualizaciones remotas..." -Level INFO
        & git fetch origin master 2>$null
        
        # Verificar si hay actualizaciones remotas disponibles
        $localCommit = & git rev-parse HEAD 2>$null
        $remoteCommit = & git rev-parse origin/master 2>$null
        
        if ($localCommit -eq $remoteCommit) {
            Write-LogMessage "‚úÖ Repositorio ya est√° actualizado - preservando cambios locales" -Level SUCCESS
            return
        }
        
        # Verificar si hay cambios locales
        $gitStatus = & git status --porcelain 2>$null
        $hasLocalChanges = $gitStatus -ne $null -and $gitStatus.Length -gt 0
        
        if ($hasLocalChanges) {
            Write-LogMessage "üìã Hay cambios locales Y actualizaciones remotas disponibles" -Level INFO
            Write-LogMessage "    ‚îî‚îÄ Cambios locales detectados:" -Level INFO
            $gitStatus | ForEach-Object { Write-LogMessage "      ‚Ä¢ $_" -Level INFO }
            
            # Estrategia inteligente: intentar rebase autom√°tico
            Write-LogMessage "    ‚îî‚îÄ Intentando fusi√≥n inteligente con rebase..." -Level INFO
            & git stash push -m "Auto-stash para rebase $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" 2>$null
            
            $pullResult = & git pull --rebase origin master 2>&1
            
            if ($LASTEXITCODE -eq 0) {
                Write-LogMessage "‚úÖ C√≥digo actualizado exitosamente con rebase" -Level SUCCESS
                
                # Intentar restaurar cambios locales
                $stashList = & git stash list 2>$null
                if ($stashList -match "Auto-stash para rebase") {
                    Write-LogMessage "    ‚îî‚îÄ Restaurando cambios locales..." -Level INFO
                    $popResult = & git stash pop 2>&1
                    if ($LASTEXITCODE -eq 0) {
                        Write-LogMessage "‚úÖ Cambios locales restaurados exitosamente" -Level SUCCESS
                    } else {
                        Write-LogMessage "‚ö†Ô∏è  Conflictos detectados al restaurar cambios:" -Level WARN
                        Write-LogMessage "      $($popResult -join "`n")" -Level WARN
                        Write-LogMessage "    ‚îî‚îÄ Puedes resolver conflictos manualmente despu√©s" -Level INFO
                    }
                }
            } else {
                Write-LogMessage "‚ùå Error en rebase autom√°tico:" -Level ERROR
                Write-LogMessage "    $($pullResult -join "`n")" -Level ERROR
                
                # Restaurar stash en caso de error
                & git stash pop 2>$null
                Write-LogMessage "‚ö†Ô∏è  Cambios locales restaurados - actualizaci√≥n omitida" -Level WARN
            }
        } else {
            # No hay cambios locales, pull directo
            Write-LogMessage "    ‚îî‚îÄ Sin cambios locales - actualizando directamente..." -Level INFO
            $pullResult = & git pull origin master 2>&1
            
            if ($LASTEXITCODE -eq 0) {
                Write-LogMessage "‚úÖ C√≥digo fuente actualizado desde Git" -Level SUCCESS
            } else {
                Write-LogMessage "‚ö†Ô∏è  Warning: No se pudo actualizar - $($pullResult -join "`n")" -Level WARN
            }
        }
    }
    catch {
        Write-LogMessage "‚ö†Ô∏è  Error en operaci√≥n Git: $($_.Exception.Message)" -Level WARN
        Write-LogMessage "    ‚îî‚îÄ Continuando con c√≥digo local..." -Level INFO
    }
}

function Clear-BuildArtifacts {
    Write-LogMessage "üßπ Limpiando artefactos de compilaci√≥n..." -Level INFO
    
    $artifactDirs = @("bin", "obj")
    
    foreach ($dir in $artifactDirs) {
        if (Test-Path $dir) {
            Write-LogMessage "    ‚îî‚îÄ Eliminando directorio: $dir" -Level INFO
            Remove-Item $dir -Recurse -Force -ErrorAction SilentlyContinue
        }
    }
    
    Write-LogMessage "‚úÖ Artefactos eliminados exitosamente" -Level SUCCESS
}

function Restore-Dependencies {
    Write-LogMessage "üì¶ Restaurando dependencias NuGet..." -Level INFO
    
    try {
        $restoreOutput = & dotnet restore $Config.SolutionFile 2>&1
        
        if ($LASTEXITCODE -eq 0) {
            Write-LogMessage "‚úÖ Dependencias restauradas exitosamente" -Level SUCCESS
        } else {
            Write-LogMessage "‚ùå Error en restauraci√≥n: $restoreOutput" -Level ERROR
            throw "Fall√≥ la restauraci√≥n de dependencias"
        }
    }
    catch {
        Write-LogMessage "‚ùå Error cr√≠tico en restauraci√≥n de dependencias" -Level ERROR
        throw
    }
}

function Build-Application {
    Write-LogMessage "üî® Compilando aplicaci√≥n en modo $($Config.BuildConfig)..." -Level INFO
    
    try {
        $buildArgs = @(
            "build"
            $Config.SolutionFile
            "-c", $Config.BuildConfig
            "--no-restore"
            "--verbosity", "minimal"
        )
        
        $buildOutput = & dotnet @buildArgs 2>&1
        
        if ($LASTEXITCODE -eq 0) {
            Write-LogMessage "‚úÖ Compilaci√≥n exitosa" -Level SUCCESS
        } else {
            Write-LogMessage "‚ùå Error en compilaci√≥n:" -Level ERROR
            Write-LogMessage $buildOutput -Level ERROR
            throw "Fall√≥ la compilaci√≥n"
        }
    }
    catch {
        Write-LogMessage "‚ùå Error cr√≠tico en compilaci√≥n" -Level ERROR
        throw
    }
}

function Stop-ExistingProcesses {
    Write-LogMessage "‚èπÔ∏è  Verificando procesos existentes..." -Level INFO
    
    $processes = Get-Process -Name $Config.ProjectName -ErrorAction SilentlyContinue
    
    if ($processes) {
        Write-LogMessage "    ‚îî‚îÄ Deteniendo $($processes.Count) proceso(s) existente(s)..." -Level INFO
        $processes | Stop-Process -Force -ErrorAction SilentlyContinue
        Start-Sleep -Seconds 2
        Write-LogMessage "‚úÖ Procesos anteriores detenidos" -Level SUCCESS
    } else {
        Write-LogMessage "‚úÖ No hay procesos previos ejecut√°ndose" -Level SUCCESS
    }
}

function Start-Application {
    Write-LogMessage "üöÄ Iniciando aplicaci√≥n actualizada..." -Level INFO
    
    try {
        # M√©todo 1: Ejecutar desde proyecto
        Write-LogMessage "    ‚îî‚îÄ M√©todo 1: Ejecutando desde proyecto..." -Level INFO
        
        $runArgs = @(
            "run"
            "--project", $Config.ProjectFile
            "--no-build"
        )
        
        Start-Process -FilePath "dotnet" -ArgumentList $runArgs -WindowStyle Hidden
        
        # Verificar que se inici√≥ correctamente
        Start-Sleep -Seconds 3
        
        $runningProcess = Get-Process -Name "dotnet" -ErrorAction SilentlyContinue | 
                         Where-Object { $_.ProcessName -eq "dotnet" }
        
        if ($runningProcess) {
            Write-LogMessage "‚úÖ Aplicaci√≥n iniciada correctamente (PID: $($runningProcess.Id))" -Level SUCCESS
            return $true
        } else {
            # M√©todo 2: Ejecutar binario directo
            Write-LogMessage "    ‚îî‚îÄ M√©todo 2: Ejecutando binario directo..." -Level INFO
            
            $exePath = "bin\$($Config.BuildConfig)\net8.0-windows\$($Config.ProjectName).exe"
            
            if (Test-Path $exePath) {
                Start-Process -FilePath $exePath
                Write-LogMessage "‚úÖ Aplicaci√≥n iniciada desde binario" -Level SUCCESS
                return $true
            } else {
                Write-LogMessage "‚ùå No se pudo encontrar el ejecutable" -Level ERROR
                return $false
            }
        }
    }
    catch {
        Write-LogMessage "‚ùå Error al iniciar aplicaci√≥n: $($_.Exception.Message)" -Level ERROR
        return $false
    }
}

function Show-Summary {
    param([bool]$Success)
    
    Write-Host "`n" -NoNewline
    Write-Host "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" -ForegroundColor Green
    
    if ($Success) {
        Write-Host "‚ïë                     üéâ ACTUALIZACI√ìN COMPLETA üéâ                ‚ïë" -ForegroundColor Green
    } else {
        Write-Host "‚ïë                     ‚ùå ACTUALIZACI√ìN FALLIDA ‚ùå                 ‚ïë" -ForegroundColor Red
    }
    
    Write-Host "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" -ForegroundColor Green
    
    Write-Host "`nüìä Resumen de la operaci√≥n:" -ForegroundColor Cyan
    Write-Host "    ‚Ä¢ Proyecto: $($Config.ProjectName)" -ForegroundColor White
    Write-Host "    ‚Ä¢ Configuraci√≥n: $($Config.BuildConfig)" -ForegroundColor White
    Write-Host "    ‚Ä¢ Timestamp: $(Get-Date)" -ForegroundColor White
    Write-Host "    ‚Ä¢ Log: $script:LogFile" -ForegroundColor White
    
    if ($Success) {
        Write-Host "`nüí° La aplicaci√≥n deber√≠a estar ejecut√°ndose ahora." -ForegroundColor Green
    } else {
        Write-Host "`nüìã Revisa el archivo de log para detalles del error." -ForegroundColor Yellow
    }
}

# ====================================================================
# FUNCI√ìN PRINCIPAL
# ====================================================================
function Main {
    try {
        # Inicializar logging
        if (-not (Test-Path $Config.LogDirectory)) {
            New-Item -ItemType Directory -Path $Config.LogDirectory -Force | Out-Null
        }
        
        $script:LogFile = Join-Path $Config.LogDirectory "deployment_$(Get-Date -Format 'yyyyMMdd_HHmmss').log"
        
        # Limpiar logs antiguos
        Get-ChildItem $Config.LogDirectory -Filter "deployment_*.log" | 
            Sort-Object LastWriteTime -Descending | 
            Select-Object -Skip $Config.MaxLogFiles | 
            Remove-Item -Force -ErrorAction SilentlyContinue
        
        # Header empresarial
        Write-Host "`n"
        Write-Host "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" -ForegroundColor Green
        Write-Host "‚ïë              ü§ñ CHATBOT GOMARCO - AUTO UPDATER ü§ñ              ‚ïë" -ForegroundColor Green
        Write-Host "‚ïë                PowerShell Enterprise DevOps Solution             ‚ïë" -ForegroundColor Green
        Write-Host "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" -ForegroundColor Green
        
        Write-LogMessage "=== INICIANDO PROCESO DE ACTUALIZACI√ìN AUTOM√ÅTICA ===" -Level INFO
        
        # Pipeline de actualizaci√≥n
        Test-Prerequisites
        Update-SourceCode
        
        if ($ForceRecompile) {
            Clear-BuildArtifacts
        }
        
        Restore-Dependencies
        Build-Application
        Stop-ExistingProcesses
        $appStarted = Start-Application
        
        Show-Summary -Success $appStarted
        
        Write-LogMessage "=== PROCESO COMPLETADO EXITOSAMENTE ===" -Level SUCCESS
        
    }
    catch {
        Write-LogMessage "=== ERROR CR√çTICO: $($_.Exception.Message) ===" -Level ERROR
        Show-Summary -Success $false
        throw
    }
}

# ====================================================================
# EJECUCI√ìN
# ====================================================================
if ($MyInvocation.InvocationName -ne '.') {
    Main
} 