#Requires -Version 5.1
<#
.SYNOPSIS
    üöÄ CHATBOT GOMARCO - Enterprise Auto-Updater con Ollama Autom√°tico
    
.DESCRIPTION
    Script empresarial para automatizar la instalaci√≥n de Ollama y ejecuci√≥n
    del Chatbot GOMARCO con configuraci√≥n autom√°tica de IA.
    
.EXAMPLE
    .\ActualizarYEjecutar_Fixed.ps1
    
.NOTES
    Versi√≥n: 3.0 Enterprise (Ollama Auto-Install Fixed)
    Desarrollado por: DevOps Team GOMARCO
    Requisitos: .NET 8 SDK, PowerShell 5.1+
#>

[CmdletBinding()]
param(
    [Parameter(Mandatory=$false)]
    [ValidateSet("Debug", "Release")]
    [string]$ConfigurationType = "Debug",
    
    [Parameter(Mandatory=$false)]
    [switch]$SkipGitPull,
    
    [Parameter(Mandatory=$false)]
    [switch]$ForceOllamaInstall
)

# ====================================================================
# CONFIGURACI√ìN EMPRESARIAL
# ====================================================================
$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"

$Config = @{
    ProjectName = "ChatbotGomarco"
    SolutionFile = "chatbot.sln"
    ProjectFile = "ChatbotGomarco.csproj"
    BuildConfig = $ConfigurationType
    LogDirectory = "logs"
    MaxLogFiles = 10
    OllamaDownloadUrl = "https://ollama.com/download/windows"
    OllamaInstallerUrl = "https://github.com/ollama/ollama/releases/latest/download/OllamaSetup.exe"
}

# ====================================================================
# FUNCIONES UTILITARIAS
# ====================================================================

function Write-LogMessage {
    param(
        [Parameter(Mandatory=$true)]
        [string]$Message,
        
        [Parameter(Mandatory=$false)]
        [ValidateSet("INFO", "WARN", "ERROR", "SUCCESS")]
        [string]$Level = "INFO"
    )
    
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logEntry = "[$timestamp] [$Level] $Message"
    
    # Color coding for console
    switch ($Level) {
        "INFO"    { Write-Host $logEntry -ForegroundColor Cyan }
        "WARN"    { Write-Host $logEntry -ForegroundColor Yellow }
        "ERROR"   { Write-Host $logEntry -ForegroundColor Red }
        "SUCCESS" { Write-Host $logEntry -ForegroundColor Green }
    }
    
    # Write to log file
    if ($script:LogFile) {
        $logEntry | Add-Content -Path $script:LogFile -Encoding UTF8
    }
}

function Test-OllamaInstalled {
    Write-LogMessage "üîç Verificando instalaci√≥n de Ollama..." -Level INFO
    
    try {
        $null = & ollama --version 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-LogMessage "‚úÖ Ollama est√° instalado" -Level SUCCESS
            return $true
        }
    }
    catch {
        # Ollama no est√° instalado o no est√° en PATH
    }
    
    Write-LogMessage "‚ùå Ollama no est√° instalado" -Level WARN
    return $false
}

function Test-OllamaRunning {
    Write-LogMessage "üîç Verificando si Ollama est√° ejecut√°ndose..." -Level INFO
    
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:11434/api/version" -TimeoutSec 5 -ErrorAction SilentlyContinue
        if ($response.StatusCode -eq 200) {
            Write-LogMessage "‚úÖ Ollama est√° ejecut√°ndose correctamente" -Level SUCCESS
            return $true
        }
    }
    catch {
        # Ollama no est√° ejecut√°ndose
    }
    
    Write-LogMessage "‚ùå Ollama no est√° ejecut√°ndose" -Level WARN
    return $false
}

function Start-OllamaService {
    Write-LogMessage "üöÄ Iniciando servicio Ollama..." -Level INFO
    
    try {
        Start-Process -FilePath "ollama" -ArgumentList "serve" -WindowStyle Hidden -ErrorAction Stop
        Start-Sleep -Seconds 8
        
        # Verificar que se inici√≥ correctamente
        if (Test-OllamaRunning) {
            Write-LogMessage "‚úÖ Ollama iniciado exitosamente" -Level SUCCESS
            return $true
        } else {
            Write-LogMessage "‚ùå Ollama no responde despu√©s de iniciar" -Level ERROR
            return $false
        }
    }
    catch {
        Write-LogMessage "‚ùå Error iniciando Ollama: $($_.Exception.Message)" -Level ERROR
        return $false
    }
}

function Install-OllamaAutomatic {
    Write-LogMessage "üöÄ Instalando Ollama autom√°ticamente..." -Level INFO
    
    try {
        $tempPath = [System.IO.Path]::GetTempPath()
        $installerPath = Join-Path $tempPath "OllamaSetup.exe"
        
        Write-LogMessage "    ‚îî‚îÄ Descargando instalador de Ollama..." -Level INFO
        
        # Limpiar instalador anterior
        if (Test-Path $installerPath) {
            Remove-Item $installerPath -Force -ErrorAction SilentlyContinue
        }
        
        # Descargar instalador
        $webRequest = @{
            Uri = $Config.OllamaInstallerUrl
            OutFile = $installerPath
            UserAgent = "Mozilla/5.0 Windows NT 10.0 Win64 x64 AppleWebKit/537.36"
            TimeoutSec = 180
        }
        Invoke-WebRequest @webRequest
        
        # Verificar descarga
        if ((Test-Path $installerPath) -and (Get-Item $installerPath).Length -gt 1MB) {
            Write-LogMessage "‚úÖ Instalador descargado correctamente" -Level SUCCESS
            
            # Ejecutar instalador
            Write-LogMessage "    ‚îî‚îÄ Ejecutando instalador..." -Level INFO
            $installProcess = Start-Process -FilePath $installerPath -ArgumentList "/S" -Wait -PassThru -NoNewWindow
            
            if ($installProcess.ExitCode -eq 0) {
                Write-LogMessage "‚úÖ Ollama instalado exitosamente" -Level SUCCESS
                
                # Esperar inicializaci√≥n
                Start-Sleep -Seconds 10
                
                # Verificar instalaci√≥n
                if (Test-OllamaInstalled) {
                    Write-LogMessage "‚úÖ Ollama verificado y funcionando" -Level SUCCESS
                    return $true
                } else {
                    Write-LogMessage "‚ö†Ô∏è  Instalaci√≥n completada - reinicia PowerShell para continuar" -Level WARN
                    return $false
                }
            } else {
                throw "Instalador fall√≥ con c√≥digo: $($installProcess.ExitCode)"
            }
        } else {
            throw "Error descargando el instalador"
        }
    }
    catch {
        Write-LogMessage "‚ùå Error en instalaci√≥n autom√°tica: $($_.Exception.Message)" -Level ERROR
        return $false
    }
    finally {
        # Limpiar archivo temporal
        if (Test-Path $installerPath) {
            Remove-Item $installerPath -Force -ErrorAction SilentlyContinue
        }
    }
}

function Open-OllamaDownloadPage {
    Write-LogMessage "üåê Abriendo p√°gina de descarga de Ollama..." -Level INFO
    
    try {
        Start-Process $Config.OllamaDownloadUrl
        Write-LogMessage "‚úÖ P√°gina de descarga abierta en el navegador" -Level SUCCESS
        
        Write-Host ""
        Write-Host "üìã INSTRUCCIONES PARA INSTALAR OLLAMA:" -ForegroundColor Yellow
        Write-Host "   1. Descarga 'Download for Windows' desde la p√°gina abierta" -ForegroundColor White
        Write-Host "   2. Ejecuta el instalador como administrador" -ForegroundColor White
        Write-Host "   3. Reinicia esta aplicaci√≥n despu√©s de la instalaci√≥n" -ForegroundColor White
        Write-Host ""
        
        $response = Read-Host "¬øDeseas intentar la instalaci√≥n autom√°tica en su lugar? (S/N)"
        if ($response -eq "S" -or $response -eq "s") {
            return Install-OllamaAutomatic
        }
        
        return $false
    }
    catch {
        Write-LogMessage "‚ùå Error abriendo navegador: $($_.Exception.Message)" -Level ERROR
        Write-LogMessage "üìã Visita manualmente: $($Config.OllamaDownloadUrl)" -Level INFO
        return $false
    }
}

function Install-EssentialModels {
    Write-LogMessage "üß† Instalando modelos esenciales para DeepSeek..." -Level INFO
    
    $modelos = @(
        @{ Nombre = "phi3:mini"; Descripcion = "Phi-3-Mini (Base estable)" },
        @{ Nombre = "deepseek-r1:7b"; Descripcion = "DeepSeek-R1 7B (Razonamiento)" }
    )
    
    foreach ($modelo in $modelos) {
        try {
            Write-LogMessage "üì• Descargando $($modelo.Descripcion)..." -Level INFO
            Write-LogMessage "    ‚îî‚îÄ Esto puede tardar varios minutos..." -Level INFO
            
            $pullProcess = Start-Process -FilePath "ollama" -ArgumentList "pull", $modelo.Nombre -Wait -PassThru -NoNewWindow
            
            if ($pullProcess.ExitCode -eq 0) {
                Write-LogMessage "‚úÖ $($modelo.Descripcion) instalado correctamente" -Level SUCCESS
            } else {
                Write-LogMessage "‚ö†Ô∏è  Error descargando $($modelo.Descripcion)" -Level WARN
            }
        }
        catch {
            Write-LogMessage "‚ö†Ô∏è  Error con $($modelo.Descripcion): $($_.Exception.Message)" -Level WARN
        }
    }
}

function Setup-OllamaComplete {
    Write-LogMessage "üîß CONFIGURACI√ìN AUTOM√ÅTICA DE OLLAMA" -Level INFO
    Write-LogMessage "    ‚îî‚îÄ Necesario para DeepSeek y modelos locales" -Level INFO
    
    # Paso 1: Verificar si est√° instalado
    if (-not (Test-OllamaInstalled)) {
        Write-LogMessage "üì¶ Ollama no encontrado - iniciando instalaci√≥n..." -Level WARN
        
        if ($ForceOllamaInstall) {
            # Instalaci√≥n autom√°tica forzada
            if (-not (Install-OllamaAutomatic)) {
                Write-LogMessage "‚ùå Instalaci√≥n autom√°tica fall√≥" -Level ERROR
                Open-OllamaDownloadPage
                return $false
            }
        } else {
            # Preguntar al usuario qu√© prefiere
            Write-Host ""
            Write-Host "ü§ñ OLLAMA REQUERIDO PARA DEEPSEEK" -ForegroundColor Yellow
            Write-Host "   DeepSeek y otros modelos locales requieren Ollama para funcionar." -ForegroundColor White
            Write-Host ""
            Write-Host "   Opciones disponibles:" -ForegroundColor Cyan
            Write-Host "   1. Instalaci√≥n autom√°tica (recomendado)" -ForegroundColor White
            Write-Host "   2. Descarga manual desde ollama.com" -ForegroundColor White
            Write-Host ""
            
            $choice = Read-Host "¬øQu√© opci√≥n prefieres? (1/2)"
            
            if ($choice -eq "1") {
                if (-not (Install-OllamaAutomatic)) {
                    Write-LogMessage "‚ùå Instalaci√≥n autom√°tica fall√≥ - abriendo p√°gina manual" -Level ERROR
                    Open-OllamaDownloadPage
                    return $false
                }
            } else {
                Open-OllamaDownloadPage
                return $false
            }
        }
    }
    
    # Paso 2: Verificar que est√© ejecut√°ndose
    if (-not (Test-OllamaRunning)) {
        Write-LogMessage "üöÄ Ollama instalado pero no est√° ejecut√°ndose - iniciando..." -Level INFO
        if (-not (Start-OllamaService)) {
            Write-LogMessage "‚ùå No se pudo iniciar Ollama" -Level ERROR
            return $false
        }
    }
    
    # Paso 3: Instalar modelos esenciales
    Write-LogMessage "üìö Verificando modelos necesarios..." -Level INFO
    Install-EssentialModels
    
    Write-LogMessage "‚úÖ OLLAMA CONFIGURADO COMPLETAMENTE" -Level SUCCESS
    Write-LogMessage "    ‚îî‚îÄ DeepSeek y modelos locales listos para usar" -Level SUCCESS
    
    return $true
}

function Test-Prerequisites {
    Write-LogMessage "üîç Verificando prerrequisitos del sistema..." -Level INFO
    
    # Verificar .NET SDK
    try {
        $dotnetVersion = & dotnet --version 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-LogMessage "‚úÖ .NET SDK detectado: $dotnetVersion" -Level SUCCESS
        } else {
            throw "No se detect√≥ .NET SDK"
        }
    }
    catch {
        Write-LogMessage "‚ùå .NET 8 SDK no est√° instalado" -Level ERROR
        throw
    }
    
    # Verificar archivos del proyecto
    @($Config.SolutionFile, $Config.ProjectFile) | ForEach-Object {
        if (-not (Test-Path $_)) {
            Write-LogMessage "‚ùå Archivo requerido no encontrado: $_" -Level ERROR
            throw "Archivo del proyecto faltante: $_"
        }
    }
    
    Write-LogMessage "‚úÖ Prerrequisitos b√°sicos verificados" -Level SUCCESS
}

function Update-SourceCode {
    if ($SkipGitPull) {
        Write-LogMessage "‚è≠Ô∏è  Omitiendo actualizaci√≥n Git" -Level WARN
        return
    }
    
    Write-LogMessage "üîÑ Verificando actualizaciones Git..." -Level INFO
    
    try {
        $null = & git --version 2>$null
        if ($LASTEXITCODE -ne 0) {
            Write-LogMessage "‚ö†Ô∏è  Git no disponible - usando c√≥digo local" -Level WARN
            return
        }
        
        $pullResult = & git pull origin master 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-LogMessage "‚úÖ C√≥digo actualizado desde Git" -Level SUCCESS
        } else {
            Write-LogMessage "‚ö†Ô∏è  Warning: No se pudo actualizar Git" -Level WARN
        }
    }
    catch {
        Write-LogMessage "‚ö†Ô∏è  Error Git: usando c√≥digo local" -Level WARN
    }
}

function Clear-BuildArtifacts {
    Write-LogMessage "üßπ Limpiando artefactos de compilaci√≥n..." -Level INFO
    
    # Terminar procesos relacionados
    Get-Process | Where-Object {
        $_.ProcessName -like "*ChatbotGomarco*" -or 
        $_.ProcessName -like "*dotnet*"
    } | Stop-Process -Force -ErrorAction SilentlyContinue
    
    Start-Sleep -Seconds 2
    
    # Limpiar directorios
    @("bin", "obj") | ForEach-Object {
        if (Test-Path $_) {
            Remove-Item $_ -Recurse -Force -ErrorAction SilentlyContinue
        }
    }
    
    Write-LogMessage "‚úÖ Limpieza completada" -Level SUCCESS
}

function Restore-Dependencies {
    Write-LogMessage "üì¶ Restaurando dependencias NuGet..." -Level INFO
    
    $restoreOutput = & dotnet restore $Config.SolutionFile 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-LogMessage "‚úÖ Dependencias restauradas exitosamente" -Level SUCCESS
    } else {
        Write-LogMessage "‚ùå Error en restauraci√≥n: $($restoreOutput -join "`n")" -Level ERROR
        throw "Fall√≥ la restauraci√≥n de dependencias"
    }
}

function Build-Application {
    Write-LogMessage "üî® Compilando aplicaci√≥n en modo $($Config.BuildConfig)..." -Level INFO
    
    $buildArgs = @(
        "build"
        $Config.SolutionFile
        "-c", $Config.BuildConfig
        "--no-restore"
        "--force"
        "--no-incremental"
    )
    
    $buildOutput = & dotnet @buildArgs 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-LogMessage "‚úÖ Compilaci√≥n exitosa" -Level SUCCESS
    } else {
        Write-LogMessage "‚ùå Error compilando: $($buildOutput -join "`n")" -Level ERROR
        throw "Fall√≥ la compilaci√≥n"
    }
}

function Stop-ExistingProcesses {
    Write-LogMessage "‚èπÔ∏è  Verificando procesos existentes..." -Level INFO
    
    $processes = Get-Process -Name $Config.ProjectName -ErrorAction SilentlyContinue
    if ($processes) {
        Write-LogMessage "    ‚îî‚îÄ Deteniendo $($processes.Count) proceso(s)..." -Level INFO
        $processes | Stop-Process -Force -ErrorAction SilentlyContinue
        Start-Sleep -Seconds 2
        Write-LogMessage "‚úÖ Procesos anteriores detenidos" -Level SUCCESS
    } else {
        Write-LogMessage "‚úÖ No hay procesos previos" -Level SUCCESS
    }
}

function Start-Application {
    Write-LogMessage "üöÄ Iniciando aplicaci√≥n con Ollama configurado..." -Level INFO
    
    try {
        $runArgs = @(
            "run"
            "--project", $Config.ProjectFile
            "--no-build"
        )
        
        Start-Process -FilePath "dotnet" -ArgumentList $runArgs -WindowStyle Hidden
        Start-Sleep -Seconds 3
        
        $runningProcess = Get-Process -Name "dotnet" -ErrorAction SilentlyContinue
        if ($runningProcess) {
            Write-LogMessage "‚úÖ Aplicaci√≥n iniciada correctamente" -Level SUCCESS
            Write-LogMessage "‚úÖ DeepSeek y modelos locales disponibles" -Level SUCCESS
            return $true
        } else {
            # M√©todo alternativo
            $exePath = "bin\$($Config.BuildConfig)\net8.0-windows\$($Config.ProjectName).exe"
            if (Test-Path $exePath) {
                Start-Process -FilePath $exePath
                Write-LogMessage "‚úÖ Aplicaci√≥n iniciada desde binario" -Level SUCCESS
                return $true
            }
        }
        
        return $false
    }
    catch {
        Write-LogMessage "‚ùå Error iniciando aplicaci√≥n: $($_.Exception.Message)" -Level ERROR
        return $false
    }
}

function Show-Summary {
    param([bool]$Success, [bool]$OllamaConfigured)
    
    Write-Host "`n"
    Write-Host "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" -ForegroundColor Green
    
    if ($Success) {
        Write-Host "‚ïë                     üéâ CHATBOT GOMARCO LISTO üéâ                 ‚ïë" -ForegroundColor Green
        if ($OllamaConfigured) {
            Write-Host "‚ïë                   ‚úÖ OLLAMA Y DEEPSEEK ACTIVOS ‚úÖ                ‚ïë" -ForegroundColor Green
        }
    } else {
        Write-Host "‚ïë                     ‚ùå ERROR EN CONFIGURACI√ìN ‚ùå                ‚ïë" -ForegroundColor Red
    }
    
    Write-Host "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" -ForegroundColor Green
    
    if ($Success) {
        Write-Host "`nüöÄ FUNCIONALIDADES DISPONIBLES:" -ForegroundColor Cyan
        Write-Host "   ‚úÖ OpenAI GPT-4 (Requiere API Key)" -ForegroundColor Green
        if ($OllamaConfigured) {
            Write-Host "   ‚úÖ DeepSeek-R1 7B (Local, Razonamiento Avanzado)" -ForegroundColor Green
            Write-Host "   ‚úÖ Phi-3-Mini (Local, Estable)" -ForegroundColor Green
            Write-Host "   ‚úÖ Ollama (Procesamiento 100% Local)" -ForegroundColor Green
        }
        Write-Host "`nüí° La aplicaci√≥n est√° ejecut√°ndose y lista para usar." -ForegroundColor Green
    }
}

# ====================================================================
# FUNCI√ìN PRINCIPAL
# ====================================================================
function Main {
    try {
        # Inicializar logging
        if (-not (Test-Path $Config.LogDirectory)) {
            New-Item -ItemType Directory -Path $Config.LogDirectory -Force | Out-Null
        }
        
        $script:LogFile = Join-Path $Config.LogDirectory "deployment_$(Get-Date -Format 'yyyyMMdd_HHmmss').log"
        
        # Header
        Write-Host "`n"
        Write-Host "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" -ForegroundColor Green
        Write-Host "‚ïë              ü§ñ CHATBOT GOMARCO - AUTO SETUP ü§ñ               ‚ïë" -ForegroundColor Green
        Write-Host "‚ïë                 üß† CON OLLAMA Y DEEPSEEK üß†                   ‚ïë" -ForegroundColor Cyan
        Write-Host "‚ïë                   Enterprise DevOps Solution                    ‚ïë" -ForegroundColor Green
        Write-Host "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" -ForegroundColor Green
        
        Write-LogMessage "=== INICIANDO CONFIGURACI√ìN AUTOM√ÅTICA ===" -Level INFO
        
        # Pipeline de configuraci√≥n
        Test-Prerequisites
        
        # CONFIGURACI√ìN AUTOM√ÅTICA DE OLLAMA (PASO CR√çTICO)
        Write-LogMessage "" -Level INFO
        Write-LogMessage "üéØ PASO CR√çTICO: Configurando Ollama para DeepSeek..." -Level INFO
        $ollamaConfigured = Setup-OllamaComplete
        
        # Continuar con el resto del setup
        Update-SourceCode
        Clear-BuildArtifacts
        Restore-Dependencies
        Stop-ExistingProcesses
        Build-Application
        $appStarted = Start-Application
        
        Show-Summary -Success $appStarted -OllamaConfigured $ollamaConfigured
        
        Write-LogMessage "=== CONFIGURACI√ìN COMPLETADA ===" -Level SUCCESS
        
        if ($ollamaConfigured) {
            Write-LogMessage "üéâ DEEPSEEK Y MODELOS LOCALES LISTOS PARA USAR" -Level SUCCESS
        }
        
    }
    catch {
        Write-LogMessage "=== ERROR CR√çTICO: $($_.Exception.Message) ===" -Level ERROR
        Show-Summary -Success $false -OllamaConfigured $false
        throw
    }
}

# ====================================================================
# EJECUCI√ìN
# ====================================================================
if ($MyInvocation.InvocationName -ne '.') {
    Main
}