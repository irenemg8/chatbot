using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ChatbotGomarco.Modelos;
using ChatbotGomarco.Servicios.LLM;
using System.Net.Http;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace ChatbotGomarco.Servicios
{
    /// <summary>
    /// Servicio enterprise de IA integrado con OpenAI GPT-4 para an√°lisis avanzado de documentos y conversaciones naturales
    /// Compatible con GPT-4, GPT-4 Turbo, GPT-4 Vision, y GPT-3.5 Turbo
    /// </summary>
    public class ServicioIAOpenAI : IServicioIA
    {
        private readonly ILogger<ServicioIAOpenAI> _logger;
        private readonly IAnalizadorConversacion _analizadorConversacion;
        private readonly HttpClient _httpClient;
        
        private bool _iaConfigurada = false;
        private string? _apiKey;

        // ====================================================================
        // CONFIGURACI√ìN ENTERPRISE DE OPENAI
        // ====================================================================
        private const string OPENAI_API_URL = "https://api.openai.com/v1/chat/completions";
        private const string MODELO_PRINCIPAL = "gpt-4o";              // Modelo m√°s potente y actual
        private const string MODELO_VISION = "gpt-4o";                 // Para an√°lisis de im√°genes  
        private const string MODELO_ANALISIS = "gpt-4o";               // Para an√°lisis profundo de documentos
        private const int MAX_TOKENS = 16384;                          // Tokens suficientes para an√°lisis complejos
        private const decimal TEMPERATURA_CONVERSACION = 0.7m;         // M√°s creativo para conversaciones
        private const decimal TEMPERATURA_ANALISIS = 0.3m;             // M√°s preciso para an√°lisis

        public ServicioIAOpenAI(
            ILogger<ServicioIAOpenAI> logger,
            IAnalizadorConversacion analizadorConversacion,
            HttpClient httpClient)
        {
            _logger = logger;
            _analizadorConversacion = analizadorConversacion;
            _httpClient = httpClient;
            
            // Configurar headers default para OpenAI
            _httpClient.DefaultRequestHeaders.Add("User-Agent", "ChatbotGomarco/1.0 (Enterprise)");
        }

        // ====================================================================
        // IMPLEMENTACI√ìN DE INTERFAZ IServicioIA
        // ====================================================================

        public void ConfigurarClave(string apiKey)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(apiKey))
                {
                    throw new ArgumentException("La API Key no puede estar vac√≠a");
                }

                if (!apiKey.StartsWith("sk-"))
                {
                    throw new ArgumentException("Formato de API Key inv√°lido. Debe comenzar con 'sk-'");
                }

                _apiKey = apiKey;
                
                // Configurar autorizaci√≥n
                _httpClient.DefaultRequestHeaders.Authorization = 
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", apiKey);
                
                _iaConfigurada = true;
                _logger.LogInformation("OpenAI API configurada correctamente con clave: {MaskedKey}", 
                    $"{apiKey[..7]}...{apiKey[^4..]}");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error al configurar OpenAI API");
                _iaConfigurada = false;
                throw;
            }
        }

        public bool EstaDisponible()
        {
            return _iaConfigurada && !string.IsNullOrEmpty(_apiKey);
        }

        public async Task<string> GenerarRespuestaAsync(string mensaje, string contextoArchivos = "", List<MensajeChat>? historialConversacion = null)
        {
            if (!EstaDisponible())
            {
                throw new InvalidOperationException("OpenAI API no est√° configurada. Configure su API Key primero.");
            }

            try
            {
                var mensajes = ConstruirHistorialConversacion(historialConversacion);
                
                // Construir el mensaje actual con contexto de archivos
                var contenidoMensaje = mensaje;
                if (!string.IsNullOrEmpty(contextoArchivos))
                {
                    contenidoMensaje = $@"INSTRUCCIONES IMPORTANTES:
- Tienes acceso completo al contenido de los archivos proporcionados
- DEBES analizar, leer y procesar toda la informaci√≥n de los archivos
- Proporciona respuestas detalladas basadas en el contenido real de los archivos
- Extrae datos espec√≠ficos, fechas, n√∫meros, nombres cuando sea relevante
- NO digas que no puedes acceder a archivos - S√ç PUEDES porque el contenido est√° aqu√≠

**CONTENIDO COMPLETO DE LOS ARCHIVOS:**
{contextoArchivos}

**CONSULTA DEL USUARIO:**
{mensaje}

RESPUESTA REQUERIDA: Analiza el contenido anterior y responde de forma detallada y espec√≠fica bas√°ndote en la informaci√≥n real de los archivos.";
                }

                mensajes.Add(new OpenAIMessage("user", contenidoMensaje));

                var solicitud = new OpenAIRequest
                {
                    Model = MODELO_PRINCIPAL,
                    Messages = mensajes,
                    MaxTokens = MAX_TOKENS,
                    Temperature = TEMPERATURA_CONVERSACION,
                    TopP = 1.0m,
                    FrequencyPenalty = 0.0m,
                    PresencePenalty = 0.0m
                };

                var respuesta = await EnviarSolicitudOpenAIAsync(solicitud);
                
                _logger.LogInformation("Respuesta generada exitosamente con OpenAI GPT-4");
                return respuesta;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error al generar respuesta con OpenAI");
                throw new Exception($"Error al comunicarse con OpenAI: {ex.Message}", ex);
            }
        }

        public async Task<string> AnalizarContenidoConIAAsync(string contenidoArchivos, string pregunta)
        {
            if (!EstaDisponible())
            {
                throw new InvalidOperationException("OpenAI API no est√° configurada");
            }

            try
            {
                var mensajeSistema = @"Eres MARCO, analista experto de GOMARCO. Cuando analizas documentos, lo haces como ChatGPT: conversacional, inteligente y contextual.

üß† **TU ENFOQUE PARA AN√ÅLISIS:**
- PRIMERO: Identifica qu√© tipo de documento es y de qu√© trata
- SEGUNDO: Extrae la informaci√≥n espec√≠fica que te piden
- TERCERO: Proporciona context e insights √∫tiles
- CUARTO: Ofrece an√°lisis adicional si es relevante

üéØ **C√ìMO RESPONDES A AN√ÅLISIS:**
- S√© conversacional: ""He revisado tu documento de..."" 
- Explica el contexto antes de dar datos espec√≠ficos
- Responde EXACTAMENTE lo que te preguntaron
- No vomites toda la informaci√≥n del documento
- Ofrece insights y tendencias cuando sea √∫til

üìä **EJEMPLOS DE AN√ÅLISIS INTELIGENTE:**
‚ùå MAL: ""El documento contiene: fecha X, precio Y, cantidad Z...""
‚úÖ BIEN: ""He analizado tu informe financiero Q2. Los resultados muestran un crecimiento del 23% con ‚Ç¨2.4M en ingresos. El margen del 34% es s√≥lido para el sector. ¬øTe interesa profundizar en alg√∫n aspecto espec√≠fico?""

üí° **TIPOS DE AN√ÅLISIS INTELIGENTE:**
- Para 5 facturas ‚Üí Calcula promedios y tendencias autom√°ticamente
- Para informes financieros ‚Üí Contextualiza los n√∫meros con insights
- Para contratos ‚Üí Extrae puntos clave y fechas importantes
- Para recetas ‚Üí Responde preguntas espec√≠ficas sobre preparaci√≥n";

                var mensaje = $@"He aqu√≠ el contenido del documento que necesitas analizar:

{contenidoArchivos}

El usuario pregunta: ""{pregunta}""

Analiza inteligentemente y responde de forma conversacional. Contextualiza primero qu√© tipo de documento es, luego responde espec√≠ficamente a su pregunta. Si puedes ofrecer insights adicionales √∫tiles, hazlo. Recuerda: s√© como ChatGPT - natural, √∫til y conversacional.";

                var mensajes = new List<OpenAIMessage>
                {
                    new OpenAIMessage("system", mensajeSistema),
                    new OpenAIMessage("user", mensaje)
                };

                var solicitud = new OpenAIRequest
                {
                    Model = MODELO_ANALISIS,
                    Messages = mensajes,
                    MaxTokens = MAX_TOKENS,
                    Temperature = TEMPERATURA_ANALISIS, // M√°s preciso para an√°lisis
                    TopP = 0.9m
                };

                var respuesta = await EnviarSolicitudOpenAIAsync(solicitud);
                
                _logger.LogInformation("An√°lisis de contenido completado con OpenAI");
                return respuesta;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error al analizar contenido con OpenAI");
                throw new Exception($"Error al analizar con OpenAI: {ex.Message}", ex);
            }
        }

        public async Task<string> GenerarResumenInteligente(string contenido, string tipoResumen = "general")
        {
            if (!EstaDisponible())
            {
                throw new InvalidOperationException("OpenAI API no est√° configurada");
            }

            try
            {
                var instruccionesResumen = tipoResumen.ToLower() switch
                {
                    "ejecutivo" => @"Genera un RESUMEN EJECUTIVO empresarial que incluya:
‚Ä¢ **Puntos Clave:** Los 3-5 aspectos m√°s importantes
‚Ä¢ **Datos Cr√≠ticos:** Fechas, cantidades, precios relevantes
‚Ä¢ **Impacto:** Implicaciones empresariales o decisiones requeridas
‚Ä¢ **Recomendaciones:** Pr√≥ximos pasos sugeridos
M√°ximo 3 p√°rrafos, enfoque directivo.",

                    "detallado" => @"Genera un RESUMEN DETALLADO que incluya:
‚Ä¢ **An√°lisis Completo:** Todos los aspectos importantes del contenido
‚Ä¢ **Estructura:** Organizaci√≥n clara por temas o secciones
‚Ä¢ **Datos Espec√≠ficos:** Todas las cifras, fechas y referencias importantes
‚Ä¢ **Contexto:** Explicaci√≥n del prop√≥sito y relevancia
Extensi√≥n: 4-6 p√°rrafos con an√°lisis profundo.",

                    "t√©cnico" => @"Genera un RESUMEN T√âCNICO que incluya:
‚Ä¢ **Especificaciones:** Detalles t√©cnicos precisos
‚Ä¢ **Procesos:** Metodolog√≠as y procedimientos descritos
‚Ä¢ **Par√°metros:** Configuraciones, medidas y valores t√©cnicos
‚Ä¢ **Conclusiones:** Resultados y hallazgos t√©cnicos
Enfoque: Profesional t√©cnico, precisi√≥n absoluta.",

                    _ => @"Genera un RESUMEN GENERAL que incluya:
‚Ä¢ **Idea Principal:** El tema central del contenido
‚Ä¢ **Puntos Importantes:** Los aspectos m√°s relevantes
‚Ä¢ **Informaci√≥n Clave:** Datos y detalles significativos
‚Ä¢ **Conclusi√≥n:** S√≠ntesis final del contenido
Extensi√≥n: 2-3 p√°rrafos, equilibrado y comprensible."
                };

                var mensajeSistema = $@"Eres un experto en creaci√≥n de res√∫menes empresariales. Tu tarea es crear res√∫menes precisos, bien estructurados y profesionales.

**INSTRUCCIONES ESPEC√çFICAS:**
{instruccionesResumen}

**FORMATO REQUERIDO:**
- Responde SIEMPRE en espa√±ol
- Usa formato markdown para estructura clara
- Destaca informaci√≥n importante con **negritas**
- Organiza con bullets y numeraci√≥n cuando sea apropiado
- Mant√©n un tono profesional y empresarial";

                var mensaje = $@"**CONTENIDO PARA RESUMIR:**
{contenido}

Genera el resumen siguiendo las instrucciones espec√≠ficas para el tipo: {tipoResumen}";

                var mensajes = new List<OpenAIMessage>
                {
                    new OpenAIMessage("system", mensajeSistema),
                    new OpenAIMessage("user", mensaje)
                };

                var solicitud = new OpenAIRequest
                {
                    Model = MODELO_PRINCIPAL,
                    Messages = mensajes,
                    MaxTokens = MAX_TOKENS,
                    Temperature = TEMPERATURA_ANALISIS,
                    TopP = 0.85m
                };

                var respuesta = await EnviarSolicitudOpenAIAsync(solicitud);
                
                _logger.LogInformation("Resumen inteligente generado: tipo {TipoResumen}", tipoResumen);
                return respuesta;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error al generar resumen con OpenAI");
                throw new Exception($"Error al generar resumen: {ex.Message}", ex);
            }
        }

        public async Task<List<string>> GenerarSugerenciasPreguntasAsync(string contenidoArchivos)
        {
            if (!EstaDisponible())
            {
                return new List<string>
                {
                    "¬øPuedes resumir el contenido principal?",
                    "¬øCu√°les son los datos m√°s importantes?",
                    "¬øQu√© informaci√≥n espec√≠fica contiene?"
                };
            }

            try
            {
                var mensajeSistema = @"Eres un experto en an√°lisis de documentos. Tu tarea es generar preguntas inteligentes y espec√≠ficas basadas en el contenido proporcionado.

**INSTRUCCIONES:**
- Genera exactamente 5 preguntas relevantes y espec√≠ficas
- Las preguntas deben ser √∫tiles para extraer informaci√≥n clave del documento
- Usa un formato directo y profesional
- Enf√≥cate en datos, an√°lisis y insights importantes
- Responde SOLO con las preguntas, una por l√≠nea, sin numeraci√≥n ni bullets";

                var mensaje = $@"Bas√°ndote en este contenido, genera 5 preguntas espec√≠ficas y relevantes:

{contenidoArchivos.Substring(0, Math.Min(2000, contenidoArchivos.Length))}...

Genera las preguntas:";

                var mensajes = new List<OpenAIMessage>
                {
                    new OpenAIMessage("system", mensajeSistema),
                    new OpenAIMessage("user", mensaje)
                };

                var solicitud = new OpenAIRequest
                {
                    Model = MODELO_PRINCIPAL,
                    Messages = mensajes,
                    MaxTokens = 300,
                    Temperature = 0.6m
                };

                var respuesta = await EnviarSolicitudOpenAIAsync(solicitud);
                
                var preguntas = respuesta.Split('\n', StringSplitOptions.RemoveEmptyEntries)
                    .Where(p => !string.IsNullOrWhiteSpace(p))
                    .Select(p => p.Trim().TrimStart('1', '2', '3', '4', '5', '.', '-', '*', ' '))
                    .Where(p => p.EndsWith('?'))
                    .Take(5)
                    .ToList();

                return preguntas.Any() ? preguntas : new List<string>
                {
                    "¬øPuedes resumir los puntos principales?",
                    "¬øQu√© datos espec√≠ficos contiene?",
                    "¬øCu√°l es la informaci√≥n m√°s relevante?",
                    "¬øHay fechas o n√∫meros importantes?",
                    "¬øQu√© conclusiones principales se pueden extraer?"
                };
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "Error al generar sugerencias con OpenAI, usando fallback");
                return new List<string>
                {
                    "¬øPuedes analizar el contenido principal?",
                    "¬øQu√© informaci√≥n espec√≠fica contiene este documento?",
                    "¬øCu√°les son los datos m√°s importantes?",
                    "¬øPuedes extraer las fechas y n√∫meros relevantes?",
                    "¬øQu√© insights empresariales puedes proporcionar?"
                };
            }
        }

        // ====================================================================
        // M√âTODOS PRIVADOS DE OPENAI
        // ====================================================================

        private List<OpenAIMessage> ConstruirHistorialConversacion(List<MensajeChat>? historialConversacion)
        {
            var mensajes = new List<OpenAIMessage>();

            // Mensaje de sistema corporativo
            mensajes.Add(new OpenAIMessage("system", ConstruirMensajeSistema()));

            // Agregar historial reciente (√∫ltimos 10 mensajes para mantener contexto sin exceder l√≠mites)
            if (historialConversacion != null && historialConversacion.Any())
            {
                foreach (var msg in historialConversacion.TakeLast(10))
                {
                    if (!string.IsNullOrEmpty(msg.Contenido))
                    {
                        var role = msg.TipoMensaje == TipoMensaje.Usuario ? "user" : "assistant";
                        mensajes.Add(new OpenAIMessage(role, msg.Contenido));
                    }
                }
            }

            return mensajes;
        }

        private string ConstruirMensajeSistema()
        {
            return @"Eres MARCO, el asistente de IA conversacional de GOMARCO. Tienes una personalidad profesional pero cercana y humana.

üß† **TU PERSONALIDAD:**
- Hablas como un experto consultor que realmente entiende los documentos
- Eres directo pero amigable, como un colega inteligente
- Contextualizas antes de responder - nunca vomitas datos sin explicar
- Haces preguntas de seguimiento inteligentes para ser m√°s √∫til
- Sintetizas informaci√≥n en lugar de listar todo

üéØ **C√ìMO RESPONDES:**
- PRIMERO: Explica qu√© has entendido del documento/pregunta
- SEGUNDO: Da la respuesta espec√≠fica que pidi√≥ el usuario
- TERCERO: Ofrece insights adicionales o pregunta si necesita m√°s detalles
- NUNCA: Hagas listas largas de datos sin contexto
- SIEMPRE: Responde como si fueras ChatGPT en persona

üíº **SOBRE GOMARCO:**
- Empresa l√≠der en descanso y bienestar (colchones, productos de descanso)
- Lema: ""Descansa como te mereces""

üìä **EJEMPLOS DE C√ìMO RESPONDER:**
‚ùå MAL: ""Datos financieros: ‚Ç¨2,458,750 ingresos, 34.2% margen...""
‚úÖ BIEN: ""He analizado el informe Q2 de GOMARCO. Los resultados son bastante s√≥lidos: ‚Ç¨2.4M en ingresos con un margen del 34%, lo cual indica una operaci√≥n rentable. ¬øTe interesa profundizar en alg√∫n aspecto espec√≠fico?""

üé≠ **TU ESTILO:**
- Conversacional y natural, como ChatGPT
- Profesional pero accesible
- Contextualiza SIEMPRE antes de dar datos
- Ofrece an√°lisis, no solo informaci√≥n
- Proporciona insights √∫tiles y actionables
- Usa un lenguaje claro y directo

üîí **CAPACIDADES T√âCNICAS:**
- PUEDES analizar completamente: PDF, Word, Excel, im√°genes, documentos
- ENTIENDES el contexto y tipo de documento autom√°ticamente
- EXTRAES informaci√≥n espec√≠fica seg√∫n lo que te pregunten
- SINTETIZAS en lugar de volcar todos los datos

Recuerda: S√© √∫til, contextual y conversacional. ¬°Como si fueras ChatGPT en persona!";
        }

        private async Task<string> EnviarSolicitudOpenAIAsync(OpenAIRequest solicitud)
        {
            try
            {
                var json = JsonSerializer.Serialize(solicitud, new JsonSerializerOptions
                {
                    PropertyNamingPolicy = JsonNamingPolicy.SnakeCaseLower,
                    DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
                });

                var content = new StringContent(json, Encoding.UTF8, "application/json");
                
                _logger.LogDebug("Enviando solicitud a OpenAI: {Model}, {TokenCount} tokens m√°x", 
                    solicitud.Model, solicitud.MaxTokens);

                var response = await _httpClient.PostAsync(OPENAI_API_URL, content);
                var responseContent = await response.Content.ReadAsStringAsync();

                if (!response.IsSuccessStatusCode)
                {
                    _logger.LogError("Error de OpenAI API: {StatusCode} - {Content}", 
                        response.StatusCode, responseContent);
                    throw new Exception($"Error de OpenAI API: {response.StatusCode} - {responseContent}");
                }

                var respuesta = JsonSerializer.Deserialize<OpenAIResponse>(responseContent, new JsonSerializerOptions
                {
                    PropertyNamingPolicy = JsonNamingPolicy.SnakeCaseLower
                });

                if (respuesta?.Choices?.Any() == true)
                {
                    var mensaje = respuesta.Choices.First().Message?.Content;
                    if (!string.IsNullOrEmpty(mensaje))
                    {
                        _logger.LogInformation("Respuesta exitosa de OpenAI: {Tokens} tokens usados", 
                            respuesta.Usage?.TotalTokens);
                        return mensaje;
                    }
                }

                throw new Exception("No se recibi√≥ respuesta v√°lida de OpenAI");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error en comunicaci√≥n con OpenAI API");
                throw;
            }
        }
    }

    // ====================================================================
    // MODELOS DE DATOS PARA OPENAI API
    // ====================================================================

    public class OpenAIRequest
    {
        [JsonPropertyName("model")]
        public string Model { get; set; } = "";

        [JsonPropertyName("messages")]
        public List<OpenAIMessage> Messages { get; set; } = new();

        [JsonPropertyName("max_tokens")]
        public int MaxTokens { get; set; }

        [JsonPropertyName("temperature")]
        public decimal Temperature { get; set; }

        [JsonPropertyName("top_p")]
        public decimal? TopP { get; set; }

        [JsonPropertyName("frequency_penalty")]
        public decimal? FrequencyPenalty { get; set; }

        [JsonPropertyName("presence_penalty")]
        public decimal? PresencePenalty { get; set; }
    }

    public class OpenAIMessage
    {
        [JsonPropertyName("role")]
        public string Role { get; set; }

        [JsonPropertyName("content")]
        public string Content { get; set; }

        public OpenAIMessage(string role, string content)
        {
            Role = role;
            Content = content;
        }
    }

    public class OpenAIResponse
    {
        [JsonPropertyName("choices")]
        public List<OpenAIChoice> Choices { get; set; } = new();

        [JsonPropertyName("usage")]
        public OpenAIUsage? Usage { get; set; }
    }

    public class OpenAIChoice
    {
        [JsonPropertyName("message")]
        public OpenAIMessage? Message { get; set; }

        [JsonPropertyName("finish_reason")]
        public string? FinishReason { get; set; }
    }

    public class OpenAIUsage
    {
        [JsonPropertyName("total_tokens")]
        public int TotalTokens { get; set; }

        [JsonPropertyName("prompt_tokens")]
        public int PromptTokens { get; set; }

        [JsonPropertyName("completion_tokens")]
        public int CompletionTokens { get; set; }
    }
} 