using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using ChatbotGomarco.Modelos;

namespace ChatbotGomarco.Servicios
{
    public class ServicioChatbot : IServicioChatbot
    {
        private readonly IServicioArchivos _servicioArchivos;
        private readonly IServicioExtraccionContenido _servicioExtraccion;
        private readonly ILogger<ServicioChatbot> _logger;
        private readonly IServicioIA _servicioIA;
        
        // Respuestas predeterminadas para el chatbot (simulaci√≥n de IA)
        private readonly List<string> _respuestasSaludo = new()
        {
            "¬°Hola! Soy el asistente de IA de GOMARCO. Estoy aqu√≠ para cualquier consulta relacionada con procesos o documentos. ¬øEn qu√© puedo ayudarte hoy?",
            "¬°Buenos d√≠as! Bienvenido al chatbot de GOMARCO. Puedo ayudarte con consultas sobre documentos o cualquier informaci√≥n que necesites. ¬øC√≥mo puedo ayudarte?",
            "¬°Hola! Soy tu asistente virtual de GOMARCO. Estoy capacitado para ayudarte con informaci√≥n y an√°lisis de documentos. ¬øQu√© necesitas saber?"
        };

        private readonly Dictionary<string, List<string>> _respuestasTematicas = new()
        {
            ["colchon"] = new()
            {
                "En GOMARCO nos especializamos en colchones de alta calidad. Nuestros productos est√°n dise√±ados para brindar el mejor descanso. ¬øTe interesa alg√∫n modelo en particular?",
                "Los colchones GOMARCO est√°n fabricados con materiales premium y tecnolog√≠a avanzada para garantizar comodidad y durabilidad. ¬øNecesitas informaci√≥n espec√≠fica sobre alg√∫n producto?",
                "Nuestros colchones han sido desarrollados pensando en tu comodidad y salud postural. Como dice nuestro lema: 'Descansa como te mereces'. ¬øQu√© caracter√≠sticas buscas?"
            },
            ["documento"] = new()
            {
                "He analizado el documento que has compartido. Bas√°ndome en el contenido, puedo ayudarte con consultas espec√≠ficas sobre la informaci√≥n contenida.",
                "Perfecto, he procesado el archivo. El documento contiene informaci√≥n valiosa que puedo usar para responder tus preguntas de manera m√°s precisa.",
                "Documento procesado correctamente. Toda la informaci√≥n ha sido analizada y est√° disponible para consultas. ¬øQu√© necesitas saber espec√≠ficamente?"
            },
            ["ayuda"] = new()
            {
                "Puedo ayudarte con m√∫ltiples tareas: analizar documentos, responder preguntas sobre GOMARCO, explicar procesos, revisar informaci√≥n corporativa y mucho m√°s. ¬øQu√© necesitas?",
                "Mis capacidades incluyen: an√°lisis de documentos PDF/Word/Excel, respuestas sobre productos GOMARCO, informaci√≥n corporativa, y procesamiento seguro de archivos confidenciales.",
                "Estoy aqu√≠ para asistirte con cualquier consulta. Puedes cargar documentos para an√°lisis, hacer preguntas sobre la empresa, o solicitar informaci√≥n espec√≠fica sobre nuestros productos."
            }
        };

        public ServicioChatbot(IServicioArchivos servicioArchivos, IServicioExtraccionContenido servicioExtraccion, ILogger<ServicioChatbot> logger, IServicioIA servicioIA)
        {
            _servicioArchivos = servicioArchivos;
            _servicioExtraccion = servicioExtraccion;
            _logger = logger;
            _servicioIA = servicioIA;
        }

        public async Task<string> ProcesarMensajeAsync(string mensaje, string idSesion, List<ArchivoSubido>? archivosContexto = null, List<MensajeChat>? historialConversacion = null)
        {
            try
            {
                _logger.LogInformation("Procesando mensaje para sesi√≥n: {Sesion}", idSesion);

                // PRIORIDAD 1: USAR IA SI EST√Å DISPONIBLE
                if (_servicioIA.EstaDisponible())
                {
                    return await ProcesarMensajeConIAAsync(mensaje, await ObtenerContextoArchivos(archivosContexto), historialConversacion);
                }

                // FALLBACK: Sistema tradicional
                _logger.LogInformation("IA no disponible, usando sistema tradicional");
                await Task.Delay(500); // Reducir tiempo de simulaci√≥n

                var mensajeLower = mensaje.ToLowerInvariant();
                
                // Verificar si hay archivos de contexto y consultas espec√≠ficas
                if (archivosContexto?.Any() == true)
                {
                    // Detectar consultas espec√≠ficas sobre archivos
                    var archivoEspecifico = DetectarConsultaArchivoEspecifico(mensaje, archivosContexto);
                    if (archivoEspecifico != null)
                    {
                        return await ProcesarConsultaArchivoEspecificoAsync(mensaje, archivoEspecifico);
                    }

                    // Si pregunta por todos los archivos o informaci√≥n general
                    if (ConsultaSobreTodosLosArchivos(mensajeLower))
                    {
                        return await GenerarResumenArchivosAsync(archivosContexto);
                    }

                    // Respuesta inteligente con contexto m√≠nimo
                    return await GenerarRespuestaConContextoInteligente(mensaje, archivosContexto);
                }

                // Detectar saludos
                if (EsSaludo(mensajeLower))
                {
                    return _respuestasSaludo[new Random().Next(_respuestasSaludo.Count)];
                }

                // Detectar temas espec√≠ficos
                foreach (var tema in _respuestasTematicas.Keys)
                {
                    if (mensajeLower.Contains(tema))
                    {
                        var respuestas = _respuestasTematicas[tema];
                        return respuestas[new Random().Next(respuestas.Count)];
                    }
                }

                // Respuesta general inteligente
                return GenerarRespuestaGeneral(mensaje);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error al procesar mensaje");
                return "Disculpa, he experimentado un error al procesar tu consulta. Por favor, intenta nuevamente o contacta al soporte t√©cnico.";
            }
        }

        public async Task<string> AnalizarArchivoAsync(ArchivoSubido archivo)
        {
            try
            {
                _logger.LogInformation("Analizando contenido espec√≠fico para trabajador: {Nombre}", archivo.NombreOriginal);

                // Obtener archivo temporal para an√°lisis
                var rutaTemporal = await _servicioArchivos.DescargarArchivoTemporalAsync(archivo.Id);
                
                var resultado = new StringBuilder();
                resultado.AppendLine($"üìã **{archivo.NombreOriginal}**");
                resultado.AppendLine($"üìÖ Cargado: {archivo.FechaSubida:dd/MM/yyyy}");
                resultado.AppendLine();

                // Verificar si el tipo es compatible para extracci√≥n
                if (_servicioExtraccion.EsTipoCompatible(archivo.TipoContenido))
                {
                    _logger.LogInformation("Extrayendo datos espec√≠ficos del negocio...");
                    
                    // Extraer contenido real
                    var contenidoCompleto = await _servicioExtraccion.ExtraerTextoAsync(rutaTemporal, archivo.TipoContenido);
                    
                    if (!string.IsNullOrWhiteSpace(contenidoCompleto))
                    {
                        // AN√ÅLISIS ESPEC√çFICO PARA TRABAJADORES
                        var datosEspecificos = ExtraerDatosEspecificosNegocio(contenidoCompleto, archivo.TipoContenido);
                        
                        if (datosEspecificos.Any())
                        {
                            resultado.AppendLine("üéØ **INFORMACI√ìN CLAVE ENCONTRADA:**");
                            foreach (var dato in datosEspecificos)
                            {
                                resultado.AppendLine($"‚Ä¢ **{dato.Key}:** {dato.Value}");
                            }
                            resultado.AppendLine();
                        }

                        // EXTRACCI√ìN DE DATOS ACTIONABLES
                        var datosActionables = ExtraerInformacionActionable(contenidoCompleto);
                        
                        if (datosActionables.Precios.Any())
                        {
                            resultado.AppendLine("üí∞ **PRECIOS Y COSTOS:**");
                            foreach (var precio in datosActionables.Precios.Take(5))
                            {
                                resultado.AppendLine($"‚Ä¢ {precio}");
                            }
                            resultado.AppendLine();
                        }

                        if (datosActionables.Fechas.Any())
                        {
                            resultado.AppendLine("üìÖ **FECHAS IMPORTANTES:**");
                            foreach (var fecha in datosActionables.Fechas.Take(5))
                            {
                                resultado.AppendLine($"‚Ä¢ {fecha}");
                            }
                            resultado.AppendLine();
                        }

                        if (datosActionables.Contactos.Any())
                        {
                            resultado.AppendLine("üìû **INFORMACI√ìN DE CONTACTO:**");
                            foreach (var contacto in datosActionables.Contactos.Take(5))
                            {
                                resultado.AppendLine($"‚Ä¢ {contacto}");
                            }
                            resultado.AppendLine();
                        }

                        if (datosActionables.Procedimientos.Any())
                        {
                            resultado.AppendLine("üìã **PROCEDIMIENTOS Y PASOS:**");
                            foreach (var procedimiento in datosActionables.Procedimientos.Take(3))
                            {
                                resultado.AppendLine($"‚Ä¢ {procedimiento}");
                            }
                            resultado.AppendLine();
                        }

                        if (datosActionables.Numeros.Any())
                        {
                            resultado.AppendLine("üî¢ **N√öMEROS Y CANTIDADES RELEVANTES:**");
                            foreach (var numero in datosActionables.Numeros.Take(5))
                            {
                                resultado.AppendLine($"‚Ä¢ {numero}");
                            }
                            resultado.AppendLine();
                        }

                        // CONTENIDO DISPONIBLE PARA CONSULTAS
                        var totalPalabras = contenidoCompleto.Split(' ', StringSplitOptions.RemoveEmptyEntries).Length;
                        resultado.AppendLine("üîç **CONTENIDO DISPONIBLE PARA CONSULTAS:**");
                        resultado.AppendLine($"‚Ä¢ {totalPalabras:N0} palabras de contenido indexado");
                        resultado.AppendLine($"‚Ä¢ B√∫squeda por palabras clave activada");
                        resultado.AppendLine($"‚Ä¢ Respuestas contextuales habilitadas");
                        resultado.AppendLine();

                        // SUGERENCIAS DE CONSULTAS √öTILES
                        var sugerenciasConsulta = GenerarSugerenciasConsultaEspecificas(contenidoCompleto, archivo.TipoContenido);
                        if (sugerenciasConsulta.Any())
                        {
                            resultado.AppendLine("üí° **CONSULTAS SUGERIDAS:**");
                            foreach (var sugerencia in sugerenciasConsulta.Take(4))
                            {
                                resultado.AppendLine($"‚Ä¢ \"{sugerencia}\"");
                            }
                        }
                    }
                    else
                    {
                        resultado.AppendLine("‚ö†Ô∏è **No se pudo extraer contenido textual del archivo.**");
                        resultado.AppendLine("El archivo puede estar protegido, corrupto, o contener principalmente im√°genes sin texto.");
                    }
                }
                else
                {
                    resultado.AppendLine("‚ö†Ô∏è **Tipo de archivo no compatible para an√°lisis de contenido espec√≠fico.**");
                    resultado.AppendLine("**Para an√°lisis completo, usa archivos:**");
                    resultado.AppendLine("‚Ä¢ **Documentos:** PDF, Word, Excel, PowerPoint");
                    resultado.AppendLine("‚Ä¢ **Datos:** TXT, CSV, JSON");
                    resultado.AppendLine("‚Ä¢ **Im√°genes:** JPG, PNG (con OCR para extraer texto)");
                }

                // Limpiar archivo temporal
                if (File.Exists(rutaTemporal))
                    File.Delete(rutaTemporal);

                return resultado.ToString();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error al analizar archivo espec√≠ficamente para trabajador: {Id}", archivo.Id);
                return $"‚ùå Error al analizar el archivo {archivo.NombreOriginal}: {ex.Message}";
            }
        }

        public async Task<string> GenerarTituloConversacionAsync(string primerMensaje)
        {
            try
            {
                await Task.Delay(500); // Simular procesamiento

                var mensaje = primerMensaje.ToLowerInvariant();
                
                if (mensaje.Contains("colchon") || mensaje.Contains("cama"))
                    return "Consulta sobre Colchones";
                
                if (mensaje.Contains("precio") || mensaje.Contains("costo"))
                    return "Consulta de Precios";
                
                if (mensaje.Contains("documento") || mensaje.Contains("archivo"))
                    return "An√°lisis de Documentos";
                
                if (mensaje.Contains("proceso") || mensaje.Contains("procedimiento"))
                    return "Consulta de Procesos";

                // T√≠tulo basado en las primeras palabras
                var palabras = primerMensaje.Split(' ').Take(4);
                var titulo = string.Join(" ", palabras);
                
                return titulo.Length > 30 ? titulo.Substring(0, 30) + "..." : titulo;
            }
            catch
            {
                return "Nueva Conversaci√≥n";
            }
        }

        public async Task<bool> ValidarSeguridadArchivoAsync(string rutaArchivo)
        {
            try
            {
                var infoArchivo = new FileInfo(rutaArchivo);
                
                // Verificar tama√±o m√°ximo (1GB)
                if (infoArchivo.Length > 1024 * 1024 * 1024)
                    return false;

                // Verificar extensiones permitidas
                var extensionesPermitidas = new[]
                {
                    // Documentos
                    ".pdf", ".doc", ".docx", ".xls", ".xlsx", ".ppt", ".pptx",
                    ".txt", ".csv", ".json", ".xml", ".rtf", ".odt", ".ods", ".odp",
                    
                    // Im√°genes
                    ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".svg", ".webp", ".tiff", ".tif",
                    
                    // Audio
                    ".mp3", ".wav", ".aac", ".ogg", ".m4a", ".flac",
                    
                    // Video
                    ".mp4", ".avi", ".mkv", ".mov", ".wmv", ".flv", ".webm", ".m4v",
                    
                    // Comprimidos
                    ".zip", ".rar", ".7z", ".tar", ".gz"
                };

                var extension = infoArchivo.Extension.ToLowerInvariant();
                if (!extensionesPermitidas.Contains(extension))
                    return false;

                // Verificar que el archivo no est√© vac√≠o
                if (infoArchivo.Length == 0)
                    return false;

                await Task.Delay(100); // Simular validaci√≥n
                return true;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error al validar seguridad del archivo: {Archivo}", rutaArchivo);
                return false;
            }
        }

        public async Task<List<string>> ObtenerSugerenciasRespuestaAsync(List<MensajeChat> contextoConversacion)
        {
            try
            {
                await Task.Delay(300); // Simular procesamiento

                var sugerencias = new List<string>();
                
                if (!contextoConversacion.Any())
                {
                    sugerencias.AddRange(new[]
                    {
                        "¬øPuedes contarme sobre los productos GOMARCO?",
                        "¬øQu√© archivos tengo disponibles?",
                        "¬øC√≥mo funciona el sistema de archivos seguros?"
                    });
                    return sugerencias;
                }

                var ultimoMensaje = contextoConversacion.Last();
                var contenido = ultimoMensaje.Contenido.ToLowerInvariant();

                if (contenido.Contains("colchon"))
                {
                    sugerencias.AddRange(new[]
                    {
                        "¬øQu√© modelos de colchones tienen disponibles?",
                        "Informaci√≥n sobre garant√≠as",
                        "¬øCu√°les son los precios actuales?"
                    });
                }
                else if (contenido.Contains("archivo") || contenido.Contains("documento"))
                {
                    sugerencias.AddRange(new[]
                    {
                        "Cu√©ntame sobre el archivo [nombre]",
                        "¬øQu√© archivos tengo disponibles?",
                        "Analiza el documento m√°s reciente"
                    });
                }
                else if (contenido.Contains("disponible") || contenido.Contains("lista"))
                {
                    sugerencias.AddRange(new[]
                    {
                        "Mu√©strame informaci√≥n del primer archivo",
                        "¬øPuedes resumir el contenido?",
                        "Detalles t√©cnicos del documento"
                    });
                }
                else
                {
                    sugerencias.AddRange(new[]
                    {
                        "¬øPuedes dar m√°s detalles?",
                        "¬øC√≥mo puedo proceder?",
                        "¬øHay algo m√°s que deba saber?"
                    });
                }

                return sugerencias.Take(3).ToList();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error al generar sugerencias");
                return new List<string>();
            }
        }

        public async Task<string> ProcesarMultiplesArchivosAsync(List<ArchivoSubido> archivos)
        {
            try
            {
                // Ahora delegamos a la funci√≥n de resumen m√°s inteligente
                return await GenerarResumenArchivosAsync(archivos);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error al procesar m√∫ltiples archivos");
                return "‚ùå Error al procesar los archivos de contexto.";
            }
        }

        private bool EsSaludo(string mensaje)
        {
            var saludos = new[] { "hola", "hello", "hi", "buenos", "buenas", "saludos", "hey" };
            return saludos.Any(s => mensaje.Contains(s));
        }

        private string GenerarRespuestaGeneral(string mensaje)
        {
            var respuestas = new[]
            {
                $"Entiendo tu consulta sobre '{mensaje}'. Como asistente de GOMARCO, puedo ayudarte con informaci√≥n espec√≠fica. ¬øPodr√≠as proporcionar m√°s detalles?",
                $"Gracias por tu pregunta. Para brindarte la mejor respuesta posible, ¬øpodr√≠as ser m√°s espec√≠fico sobre lo que necesitas saber?",
                $"He recibido tu consulta. Como especialista en productos GOMARCO y an√°lisis de documentos, puedo asistirte mejor si me proporcionas m√°s contexto."
            };

            return respuestas[new Random().Next(respuestas.Length)];
        }

        private string GenerarRespuestaConContexto(string mensaje, string contextoArchivos)
        {
            return $"Bas√°ndome en los documentos proporcionados y tu consulta '{mensaje}', puedo ayudarte con lo siguiente:\n\n{contextoArchivos}\n\n¬øHay algo espec√≠fico de esta informaci√≥n que te gustar√≠a explorar m√°s a fondo?";
        }

        private string DeterminarTipoAnalisis(string tipoContenido)
        {
            return tipoContenido switch
            {
                // Documentos
                "application/pdf" => "üìÑ Documento PDF",
                "application/msword" => "üìù Documento Word (.doc)",
                "application/vnd.openxmlformats-officedocument.wordprocessingml.document" => "üìù Documento Word (.docx)",
                "application/vnd.ms-excel" => "üìä Hoja Excel (.xls)",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" => "üìä Hoja Excel (.xlsx)",
                "application/vnd.ms-powerpoint" => "üìΩÔ∏è Presentaci√≥n PowerPoint (.ppt)",
                "application/vnd.openxmlformats-officedocument.presentationml.presentation" => "üìΩÔ∏è Presentaci√≥n PowerPoint (.pptx)",
                "application/rtf" => "üìù Documento RTF",
                
                // Texto y datos
                "text/plain" => "üìÑ Archivo de Texto",
                "text/csv" => "üìà Datos CSV",
                "application/json" => "üîß Datos JSON",
                "application/xml" => "üìã Datos XML",
                
                // Im√°genes
                "image/jpeg" or "image/png" => "üñºÔ∏è Imagen",
                "image/gif" => "üéûÔ∏è Imagen GIF",
                "image/bmp" => "üñºÔ∏è Imagen BMP",
                "image/svg+xml" => "üé® Imagen SVG",
                "image/webp" => "üñºÔ∏è Imagen WebP",
                "image/tiff" => "üñºÔ∏è Imagen TIFF",
                
                // Audio
                "audio/mpeg" => "üéµ Audio MP3",
                "audio/wav" => "üéµ Audio WAV",
                "audio/aac" => "üéµ Audio AAC",
                "audio/ogg" => "üéµ Audio OGG",
                "audio/mp4" => "üéµ Audio M4A",
                "audio/flac" => "üéµ Audio FLAC",
                
                // Video
                "video/mp4" => "üé¨ Video MP4",
                "video/avi" => "üé¨ Video AVI",
                "video/x-matroska" => "üé¨ Video MKV",
                "video/quicktime" => "üé¨ Video MOV",
                "video/x-ms-wmv" => "üé¨ Video WMV",
                "video/x-flv" => "üé¨ Video FLV",
                "video/webm" => "üé¨ Video WebM",
                "video/x-m4v" => "üé¨ Video M4V",
                
                // Archivos comprimidos
                "application/zip" => "üì¶ Archivo ZIP",
                "application/vnd.rar" => "üì¶ Archivo RAR",
                "application/x-7z-compressed" => "üì¶ Archivo 7Z",
                "application/x-tar" => "üì¶ Archivo TAR",
                "application/gzip" => "üì¶ Archivo GZ",
                
                _ => "üìÅ Archivo de Datos"
            };
        }

        private string GenerarAnalisisEspecifico(string tipoContenido, string nombreArchivo)
        {
            return tipoContenido switch
            {
                "application/pdf" => "‚úÖ El documento PDF ha sido procesado correctamente. Contiene texto e informaci√≥n estructurada lista para consultas.",
                "application/vnd.openxmlformats-officedocument.wordprocessingml.document" => "‚úÖ Documento de Word analizado. El contenido est√° disponible para b√∫squedas y consultas espec√≠ficas.",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" => "‚úÖ Hoja de c√°lculo procesada. Los datos num√©ricos y tablas est√°n disponibles para an√°lisis.",
                "text/plain" => "‚úÖ Archivo de texto procesado. El contenido est√° indexado y listo para consultas.",
                "text/csv" => "‚úÖ Datos CSV importados correctamente. La informaci√≥n tabular est√° disponible para an√°lisis.",
                "application/json" => "‚úÖ Estructura JSON analizada. Los datos est√°n organizados y listos para consultas.",
                _ => "‚úÖ Archivo procesado exitosamente. El contenido est√° disponible como contexto para nuestras conversaciones."
            };
        }

        private static string FormatearTama√±o(long bytes)
        {
            string[] sufijos = { "B", "KB", "MB", "GB" };
            int contador = 0;
            decimal numero = bytes;
            
            while (Math.Round(numero / 1024) >= 1)
            {
                numero /= 1024;
                contador++;
            }
            
            return $"{numero:n1} {sufijos[contador]}";
        }

        private ArchivoSubido? DetectarConsultaArchivoEspecifico(string mensaje, List<ArchivoSubido> archivos)
        {
            var mensajeLower = mensaje.ToLowerInvariant();
            
            // Buscar por nombre exacto del archivo (sin extensi√≥n)
            foreach (var archivo in archivos)
            {
                var nombreSinExtension = Path.GetFileNameWithoutExtension(archivo.NombreOriginal).ToLowerInvariant();
                var nombreCompleto = archivo.NombreOriginal.ToLowerInvariant();
                
                if (mensajeLower.Contains(nombreSinExtension) || mensajeLower.Contains(nombreCompleto))
                {
                    return archivo;
                }
            }

            // Detectar palabras clave que indican consulta espec√≠fica
            var indicadoresEspecificos = new[] { "archivo", "documento", "pdf", "word", "excel", "imagen" };
            
            if (indicadoresEspecificos.Any(ind => mensajeLower.Contains(ind)) && 
                (mensajeLower.Contains("este") || mensajeLower.Contains("el") || mensajeLower.Contains("√∫ltimo")))
            {
                // Devolver el archivo m√°s reciente
                return archivos.OrderByDescending(a => a.FechaSubida).FirstOrDefault();
            }

            return null;
        }

        private async Task<string> ProcesarConsultaArchivoEspecificoAsync(string mensaje, ArchivoSubido archivo)
        {
            var mensajeLower = mensaje.ToLowerInvariant();
            var resultado = new StringBuilder();

            resultado.AppendLine($"üìÑ **Informaci√≥n sobre: {archivo.NombreOriginal}**");
            resultado.AppendLine();

            // Informaci√≥n b√°sica siempre
            resultado.AppendLine($"üìÖ **Fecha de carga:** {archivo.FechaSubida:dd/MM/yyyy HH:mm}");
            resultado.AppendLine($"üìä **Tama√±o:** {FormatearTama√±o(archivo.Tama√±oOriginal)}");
            resultado.AppendLine($"üîç **Tipo:** {DeterminarTipoAnalisis(archivo.TipoContenido)}");
            resultado.AppendLine();

            // Respuesta espec√≠fica seg√∫n la consulta
            if (mensajeLower.Contains("resumen") || mensajeLower.Contains("qu√© contiene") || mensajeLower.Contains("contenido"))
            {
                resultado.AppendLine("üìã **Resumen del contenido:**");
                resultado.AppendLine(GenerarResumenContenidoEspecifico(archivo));
            }
            else if (mensajeLower.Contains("informaci√≥n") || mensajeLower.Contains("detalles"))
            {
                resultado.AppendLine("üìã **Detalles t√©cnicos:**");
                resultado.AppendLine(GenerarDetallesTecnicos(archivo));
            }
            else if (mensajeLower.Contains("an√°lisis") || mensajeLower.Contains("analizar"))
            {
                resultado.AppendLine("üî¨ **An√°lisis del documento:**");
                resultado.AppendLine(await GenerarAnalisisDetallado(archivo));
            }
            else
            {
                resultado.AppendLine("üí° **Informaci√≥n general:**");
                resultado.AppendLine(GenerarAnalisisEspecifico(archivo.TipoContenido, archivo.NombreOriginal));
            }

            resultado.AppendLine();
            resultado.AppendLine("‚ùì **¬øNecesitas algo espec√≠fico de este archivo?** Puedes preguntarme por:");
            resultado.AppendLine("‚Ä¢ Resumen del contenido");
            resultado.AppendLine("‚Ä¢ Detalles t√©cnicos");
            resultado.AppendLine("‚Ä¢ An√°lisis espec√≠fico");
            resultado.AppendLine("‚Ä¢ Informaci√≥n particular sobre alg√∫n tema");

            return resultado.ToString();
        }

        private bool ConsultaSobreTodosLosArchivos(string mensajeLower)
        {
            var indicadores = new[]
            {
                "todos los archivos", "qu√© archivos", "archivos cargados", "documentos subidos",
                "lista archivos", "archivos disponibles", "qu√© documentos", "cu√°ntos archivos"
            };

            return indicadores.Any(ind => mensajeLower.Contains(ind));
        }

        private async Task<string> GenerarResumenArchivosAsync(List<ArchivoSubido> archivos)
        {
            var resultado = new StringBuilder();
            resultado.AppendLine($"üìÅ **Tienes {archivos.Count} archivo(s) disponible(s):**");
            resultado.AppendLine();

            for (int i = 0; i < archivos.Count && i < 10; i++) // Limitar a 10 archivos
            {
                var archivo = archivos[i];
                resultado.AppendLine($"{i + 1}. **{archivo.NombreOriginal}**");
                resultado.AppendLine($"   üìÖ {archivo.FechaSubida:dd/MM/yyyy} ‚Ä¢ üìä {FormatearTama√±o(archivo.Tama√±oOriginal)} ‚Ä¢ üîç {DeterminarTipoAnalisis(archivo.TipoContenido)}");
                resultado.AppendLine();
            }

            if (archivos.Count > 10)
            {
                resultado.AppendLine($"... y {archivos.Count - 10} archivo(s) m√°s.");
                resultado.AppendLine();
            }

            resultado.AppendLine("üí° **Para consultar un archivo espec√≠fico**, menciona su nombre en tu pregunta.");
            resultado.AppendLine("**Ejemplo:** 'Cu√©ntame sobre el informe de ventas.pdf'");

            return resultado.ToString();
        }

        private async Task<string> GenerarRespuestaConContextoInteligente(string mensaje, List<ArchivoSubido> archivos)
        {
            var mensajeLower = mensaje.ToLowerInvariant();
            
            try
            {
                // 1. AN√ÅLISIS SEM√ÅNTICO DEL MENSAJE
                var intencionUsuario = AnalizarIntencionUsuario(mensaje);
                var palabrasClave = ExtraerPalabrasClave(mensaje);

                // 2. B√öSQUEDA EN EL CONTENIDO DE LOS ARCHIVOS
                var resultadosBusqueda = await BuscarEnArchivosAsync(palabrasClave, archivos);

                var respuesta = new StringBuilder();

                if (resultadosBusqueda.Any())
                {
                    respuesta.AppendLine($"üîç **Encontr√© informaci√≥n relevante para tu consulta:** \"{mensaje}\"");
                    respuesta.AppendLine();

                    // Mostrar resultados m√°s relevantes
                    foreach (var resultado in resultadosBusqueda.Take(3))
                    {
                        respuesta.AppendLine($"üìÑ **En: {resultado.NombreArchivo}**");
                        respuesta.AppendLine($"üìç **Contexto encontrado:**");
                        respuesta.AppendLine($"```");
                        respuesta.AppendLine(resultado.ContextoEncontrado);
                        respuesta.AppendLine($"```");
                        respuesta.AppendLine($"üéØ **Relevancia:** {resultado.PorcentajeRelevancia:F1}%");
                        respuesta.AppendLine();
                    }

                    // Generar respuesta inteligente basada en los resultados
                    var respuestaGenerada = GenerarRespuestaBasadaEnContexto(mensaje, resultadosBusqueda, intencionUsuario);
                    if (!string.IsNullOrEmpty(respuestaGenerada))
                    {
                        respuesta.AppendLine("üß† **Respuesta generada:**");
                        respuesta.AppendLine(respuestaGenerada);
                        respuesta.AppendLine();
                    }

                    if (resultadosBusqueda.Count > 3)
                    {
                        respuesta.AppendLine($"üí° Encontr√© {resultadosBusqueda.Count - 3} resultado(s) adicional(es). ¬øTe gustar√≠a que profundice en alg√∫n archivo espec√≠fico?");
                    }
                }
                else
                {
                    // Respuesta contextual cuando no encuentra coincidencias directas
                    var tiposPrincipales = archivos.GroupBy(a => DeterminarTipoAnalisis(a.TipoContenido))
                        .OrderByDescending(g => g.Count())
                        .Take(2)
                        .Select(g => g.Key)
                        .ToList();

                    respuesta.AppendLine($"ü§î No encontr√© coincidencias directas para: \"{mensaje}\"");
                    respuesta.AppendLine();
                    respuesta.AppendLine($"Tengo acceso a {archivos.Count} archivo(s) como contexto:");

                    foreach (var tipo in tiposPrincipales)
                    {
                        var cantidad = archivos.Count(a => DeterminarTipoAnalisis(a.TipoContenido) == tipo);
                        respuesta.AppendLine($"‚Ä¢ {cantidad} {tipo}(s)");
                    }

                    respuesta.AppendLine();
                    respuesta.AppendLine("üí° **Sugerencias para mejorar tu b√∫squeda:**");

                    // Sugerencias inteligentes basadas en la intenci√≥n
                    var sugerencias = GenerarSugerenciasBusqueda(intencionUsuario, archivos);
                    foreach (var sugerencia in sugerencias)
                    {
                        respuesta.AppendLine($"‚Ä¢ {sugerencia}");
                    }
                }

                return respuesta.ToString();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error en respuesta inteligente con contexto");
                
                // Fallback a la respuesta original
                var tiposPrincipales = archivos.GroupBy(a => DeterminarTipoAnalisis(a.TipoContenido))
                    .OrderByDescending(g => g.Count())
                    .Take(2)
                    .Select(g => g.Key)
                    .ToList();

                var respuesta = new StringBuilder();
                respuesta.AppendLine($"Entiendo tu consulta: '{mensaje}'");
                respuesta.AppendLine();
                respuesta.AppendLine($"Tengo acceso a {archivos.Count} archivo(s) como contexto, principalmente:");

                foreach (var tipo in tiposPrincipales)
                {
                    var cantidad = archivos.Count(a => DeterminarTipoAnalisis(a.TipoContenido) == tipo);
                    respuesta.AppendLine($"‚Ä¢ {cantidad} {tipo}(s)");
                }

                respuesta.AppendLine();
                respuesta.AppendLine("üéØ **Para una respuesta m√°s precisa:**");
                respuesta.AppendLine("‚Ä¢ Menciona un archivo espec√≠fico por su nombre");
                respuesta.AppendLine("‚Ä¢ Pregunta 'qu√© archivos tengo' para ver la lista completa");
                respuesta.AppendLine("‚Ä¢ Haz una consulta m√°s espec√≠fica sobre el tema que te interesa");

                return respuesta.ToString();
            }
        }

        private string GenerarResumenContenidoEspecifico(ArchivoSubido archivo)
        {
            return archivo.TipoContenido switch
            {
                "application/pdf" => "Este documento PDF contiene texto estructurado, posibles tablas y gr√°ficos. Perfecto para consultas sobre informaci√≥n espec√≠fica, an√°lisis de contenido y extracci√≥n de datos clave.",
                
                "application/vnd.openxmlformats-officedocument.wordprocessingml.document" => "Documento de texto de Word con formato, posiblemente incluyendo encabezados, p√°rrafos estructurados, tablas y elementos gr√°ficos. Ideal para an√°lisis de contenido textual.",
                
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" => "Hoja de c√°lculo con datos tabulares, f√≥rmulas y posibles gr√°ficos. Excelente para an√°lisis de datos, consultas num√©ricas y informaci√≥n estad√≠stica.",
                
                "text/plain" => "Archivo de texto plano con informaci√≥n en formato simple. Perfecto para b√∫squedas de texto espec√≠fico y an√°lisis de contenido directo.",
                
                "text/csv" => "Datos estructurados en formato CSV, ideales para an√°lisis estad√≠stico, consultas sobre datos espec√≠ficos y procesamiento de informaci√≥n tabular.",
                
                _ => "Archivo procesado que contiene informaci√≥n relevante para consultas. Puedo ayudarte a extraer informaci√≥n espec√≠fica o responder preguntas sobre su contenido."
            };
        }

        private string GenerarDetallesTecnicos(ArchivoSubido archivo)
        {
            var detalles = new StringBuilder();
            detalles.AppendLine($"üîç **Tipo MIME:** {archivo.TipoContenido}");
            detalles.AppendLine($"üîí **Estado:** Archivo cifrado y seguro");
            detalles.AppendLine($"‚úÖ **Hash de integridad:** {archivo.HashSha256[..16]}... (parcial)");
            
            if (!string.IsNullOrEmpty(archivo.Descripcion))
            {
                detalles.AppendLine($"üìù **Descripci√≥n:** {archivo.Descripcion}");
            }

            var extension = Path.GetExtension(archivo.NombreOriginal);
            detalles.AppendLine($"üìÑ **Extensi√≥n:** {extension}");
            
            // Informaci√≥n adicional seg√∫n el tipo
            switch (archivo.TipoContenido)
            {
                case "application/pdf":
                    detalles.AppendLine("üîç **Capacidades:** Extracci√≥n de texto, an√°lisis de estructura, identificaci√≥n de tablas");
                    break;
                case "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
                    detalles.AppendLine("üîç **Capacidades:** An√°lisis de datos, consultas num√©ricas, procesamiento de f√≥rmulas");
                    break;
                case "image/jpeg":
                case "image/png":
                    detalles.AppendLine("üîç **Capacidades:** An√°lisis visual, extracci√≥n de metadatos, descripci√≥n de contenido");
                    break;
            }

            return detalles.ToString();
        }

        private async Task<string> GenerarAnalisisDetallado(ArchivoSubido archivo)
        {
            // Simular an√°lisis m√°s profundo
            await Task.Delay(500);

            return archivo.TipoContenido switch
            {
                "application/pdf" => 
                    "üî¨ **An√°lisis completo del PDF:**\n" +
                    "‚Ä¢ Estructura del documento analizada\n" +
                    "‚Ä¢ Texto extra√≠ble identificado\n" +
                    "‚Ä¢ Posibles elementos multimedia detectados\n" +
                    "‚Ä¢ Metadatos de creaci√≥n procesados\n" +
                    "‚Ä¢ √çndice de contenidos generado\n\n" +
                    "üí° **Listo para:** B√∫squedas de texto espec√≠fico, extracci√≥n de p√°rrafos, an√°lisis de secciones particulares.",

                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" => 
                    "üî¨ **An√°lisis completo de la hoja de c√°lculo:**\n" +
                    "‚Ä¢ Hojas de trabajo identificadas\n" +
                    "‚Ä¢ Rangos de datos mapeados\n" +
                    "‚Ä¢ F√≥rmulas y funciones catalogadas\n" +
                    "‚Ä¢ Tipos de datos clasificados\n" +
                    "‚Ä¢ Gr√°ficos y elementos visuales detectados\n\n" +
                    "üí° **Listo para:** Consultas de datos espec√≠ficos, an√°lisis estad√≠stico, extracci√≥n de informaci√≥n num√©rica.",

                "application/vnd.openxmlformats-officedocument.wordprocessingml.document" => 
                    "üî¨ **An√°lisis completo del documento Word:**\n" +
                    "‚Ä¢ Estructura de encabezados mapeada\n" +
                    "‚Ä¢ P√°rrafos y secciones identificados\n" +
                    "‚Ä¢ Tablas y listas procesadas\n" +
                    "‚Ä¢ Formato y estilos analizados\n" +
                    "‚Ä¢ Elementos gr√°ficos catalogados\n\n" +
                    "üí° **Listo para:** B√∫squeda de secciones espec√≠ficas, an√°lisis de contenido por temas, extracci√≥n de informaci√≥n estructurada.",

                _ => 
                    "üî¨ **An√°lisis completo del archivo:**\n" +
                    "‚Ä¢ Contenido procesado y indexado\n" +
                    "‚Ä¢ Estructura interna analizada\n" +
                    "‚Ä¢ Metadatos extra√≠dos\n" +
                    "‚Ä¢ Informaci√≥n clave identificada\n\n" +
                    "üí° **Listo para:** Consultas espec√≠ficas, b√∫squedas de informaci√≥n, an√°lisis de contenido relevante."
            };
        }

        private string GenerarResumenInteligente(string contenido, string tipoContenido)
        {
            try
            {
                var resumen = new StringBuilder();
                var palabras = contenido.Split(' ', StringSplitOptions.RemoveEmptyEntries);
                var lineas = contenido.Split('\n', StringSplitOptions.RemoveEmptyEntries);

                // Estad√≠sticas b√°sicas mejoradas
                var caracteristicas = AnalyzarCaracteristicasContenido(contenido);
                resumen.AppendLine($"**Contenido analizado:** {palabras.Length:N0} palabras en {lineas.Length:N0} l√≠neas");
                resumen.AppendLine($"**Complejidad estimada:** {caracteristicas.ComplejidadLectura}");
                resumen.AppendLine($"**Idioma detectado:** {caracteristicas.IdiomaDetectado}");
                resumen.AppendLine();

                // Categorizaci√≥n autom√°tica del documento
                var categoria = CategorizarDocumento(contenido);
                if (!string.IsNullOrEmpty(categoria))
                {
                    resumen.AppendLine($"üìÇ **Categor√≠a identificada:** {categoria}");
                    resumen.AppendLine();
                }

                switch (tipoContenido)
                {
                    case "application/pdf":
                        return GenerarResumenPdf(contenido, resumen);
                    
                    case "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
                        return GenerarResumenWord(contenido, resumen);
                    
                    case "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
                        return GenerarResumenExcel(contenido, resumen);
                    
                    case "text/csv":
                        return GenerarResumenCsv(contenido, resumen);
                    
                    case "application/json":
                        return GenerarResumenJson(contenido, resumen);
                    
                    default:
                        return GenerarResumenTexto(contenido, resumen);
                }
            }
            catch (Exception ex)
            {
                return $"Error al generar resumen inteligente: {ex.Message}";
            }
        }

        private string GenerarResumenPdf(string contenido, StringBuilder resumen)
        {
            // Detectar si es un documento t√©cnico, informe, manual, etc.
            var palabrasClave = new Dictionary<string, string>
            {
                { "manual|instruccion|guia|procedimiento", "üìã **Tipo:** Manual o gu√≠a de instrucciones" },
                { "informe|reporte|analisis|estudio|investigacion", "üìä **Tipo:** Informe o documento anal√≠tico" },
                { "contrato|acuerdo|clausula|termino", "üìù **Tipo:** Documento legal o contractual" },
                { "producto|catalogo|precio|especificacion", "üõçÔ∏è **Tipo:** Cat√°logo de productos o especificaciones" },
                { "capacitacion|entrenamiento|curso|formacion", "üéì **Tipo:** Material de capacitaci√≥n o formaci√≥n" }
            };

            foreach (var kvp in palabrasClave)
            {
                if (Regex.IsMatch(contenido, kvp.Key, RegexOptions.IgnoreCase))
                {
                    resumen.AppendLine(kvp.Value);
                    break;
                }
            }

            // Buscar temas principales
            var temasPrincipales = ExtraerTemasPrincipales(contenido);
            if (temasPrincipales.Any())
            {
                resumen.AppendLine("**Temas principales identificados:**");
                foreach (var tema in temasPrincipales.Take(5))
                {
                    resumen.AppendLine($"‚Ä¢ {tema}");
                }
            }

            return resumen.ToString();
        }

        private string GenerarResumenWord(string contenido, StringBuilder resumen)
        {
            resumen.AppendLine("üìÑ **Tipo:** Documento de Word");
            
            // Detectar formato (carta, informe, propuesta, etc.)
            if (contenido.Contains("Estimado") || contenido.Contains("Cordiales saludos"))
                resumen.AppendLine("**Formato detectado:** Carta o comunicaci√≥n formal");
            else if (contenido.Contains("Propuesta") || contenido.Contains("Cotizaci√≥n"))
                resumen.AppendLine("**Formato detectado:** Propuesta comercial o cotizaci√≥n");
            else if (contenido.Contains("Introducci√≥n") && contenido.Contains("Conclusi√≥n"))
                resumen.AppendLine("**Formato detectado:** Informe o documento estructurado");

            var temas = ExtraerTemasPrincipales(contenido);
            if (temas.Any())
            {
                resumen.AppendLine("**Contenido principal:**");
                resumen.AppendLine($"‚Ä¢ {temas.First()}");
            }

            return resumen.ToString();
        }

        private string GenerarResumenExcel(string contenido, StringBuilder resumen)
        {
            resumen.AppendLine("üìä **Tipo:** Hoja de c√°lculo de Excel");
            
            // Detectar tipo de datos
            if (contenido.Contains("TOTAL") || contenido.Contains("SUMA"))
                resumen.AppendLine("**Contenido detectado:** Datos financieros o contables");
            else if (contenido.Contains("Fecha") && contenido.Contains("Cantidad"))
                resumen.AppendLine("**Contenido detectado:** Registro de transacciones o inventario");
            else if (contenido.Contains("Nombre") && contenido.Contains("Tel√©fono"))
                resumen.AppendLine("**Contenido detectado:** Lista de contactos o directorio");

            // Contar filas aproximadas
            var filas = contenido.Split('\n').Where(l => l.Contains("|")).Count();
            if (filas > 0)
                resumen.AppendLine($"**Filas de datos:** Aproximadamente {filas} registros");

            return resumen.ToString();
        }

        private string GenerarResumenCsv(string contenido, StringBuilder resumen)
        {
            var lineas = contenido.Split('\n', StringSplitOptions.RemoveEmptyEntries);
            var primeraLinea = lineas.FirstOrDefault() ?? "";
            
            resumen.AppendLine("üìà **Tipo:** Archivo de datos CSV");
            resumen.AppendLine($"**Registros:** {Math.Max(0, lineas.Length - 1)} filas de datos");
            
            if (!string.IsNullOrEmpty(primeraLinea))
            {
                var columnas = primeraLinea.Split(',', ';').Length;
                resumen.AppendLine($"**Columnas:** {columnas} campos por registro");
                resumen.AppendLine($"**Encabezados:** {primeraLinea.Substring(0, Math.Min(100, primeraLinea.Length))}...");
            }

            return resumen.ToString();
        }

        private string GenerarResumenJson(string contenido, StringBuilder resumen)
        {
            resumen.AppendLine("üîß **Tipo:** Archivo de datos JSON");
            
            try
            {
                if (contenido.TrimStart().StartsWith("["))
                    resumen.AppendLine("**Estructura:** Array de objetos");
                else if (contenido.TrimStart().StartsWith("{"))
                    resumen.AppendLine("**Estructura:** Objeto √∫nico");

                // Buscar campos comunes
                var camposComunesDetectados = new List<string>();
                var camposComunes = new[] { "id", "name", "email", "date", "user", "data", "config" };
                
                foreach (var campo in camposComunes)
                {
                    if (contenido.Contains($"\"{campo}\"", StringComparison.OrdinalIgnoreCase))
                        camposComunesDetectados.Add(campo);
                }

                if (camposComunesDetectados.Any())
                    resumen.AppendLine($"**Campos detectados:** {string.Join(", ", camposComunesDetectados)}");
            }
            catch
            {
                resumen.AppendLine("**Nota:** Estructura JSON compleja o anidada");
            }

            return resumen.ToString();
        }

        private string GenerarResumenTexto(string contenido, StringBuilder resumen)
        {
            // Detectar idioma aproximado
            var palabrasEspanol = new[] { "el", "la", "de", "que", "y", "a", "en", "un", "es", "se" };
            var palabrasIngles = new[] { "the", "of", "and", "a", "to", "in", "is", "you", "that", "it" };
            
            var contenidoLower = contenido.ToLowerInvariant();
            var conteoEspanol = palabrasEspanol.Count(p => contenidoLower.Contains(" " + p + " "));
            var conteoIngles = palabrasIngles.Count(p => contenidoLower.Contains(" " + p + " "));
            
            if (conteoEspanol > conteoIngles)
                resumen.AppendLine("**Idioma detectado:** Espa√±ol");
            else if (conteoIngles > conteoEspanol)
                resumen.AppendLine("**Idioma detectado:** Ingl√©s");

            // Detectar formato
            if (contenido.Contains("<?xml") || contenido.Contains("<html"))
                resumen.AppendLine("**Formato:** Archivo XML/HTML");
            else if (contenido.Contains("#!/") || contenido.Contains("import ") || contenido.Contains("function"))
                resumen.AppendLine("**Formato:** C√≥digo fuente o script");
            else
                resumen.AppendLine("**Formato:** Texto plano");

            return resumen.ToString();
        }

        #region M√©todos de an√°lisis sem√°ntico avanzado

        private CaracteristicasContenido AnalyzarCaracteristicasContenido(string contenido)
        {
            var caracteristicas = new CaracteristicasContenido();

            try
            {
                var palabras = contenido.Split(' ', StringSplitOptions.RemoveEmptyEntries);
                var oraciones = contenido.Split('.', StringSplitOptions.RemoveEmptyEntries);

                // Calcular complejidad de lectura (basado en longitud promedio de palabras y oraciones)
                var longitudPromedioPalabras = palabras.Average(p => p.Length);
                var palabrasPorOracion = palabras.Length / (float)Math.Max(1, oraciones.Length);

                caracteristicas.ComplejidadLectura = (longitudPromedioPalabras, palabrasPorOracion) switch
                {
                    ( < 4.5f, < 15f) => "B√°sica (f√°cil de leer)",
                    ( < 5.5f, < 20f) => "Intermedia (lectura est√°ndar)",
                    ( < 6.5f, < 25f) => "Avanzada (lectura compleja)",
                    _ => "Experta (muy compleja)"
                };

                // Detecci√≥n de idioma simple
                var palabrasEspa√±ol = new[] { "el", "la", "de", "que", "y", "a", "en", "un", "es", "se", "no", "te", "lo", "del", "con", "por", "para" };
                var palabrasIngles = new[] { "the", "and", "to", "of", "a", "in", "is", "it", "you", "that", "he", "was", "for", "on", "are", "as", "with" };

                var contenidoLower = contenido.ToLowerInvariant();
                var conteoEspa√±ol = palabrasEspa√±ol.Sum(p => Regex.Matches(contenidoLower, $@"\b{p}\b").Count);
                var conteoIngles = palabrasIngles.Sum(p => Regex.Matches(contenidoLower, $@"\b{p}\b").Count);

                caracteristicas.IdiomaDetectado = conteoEspa√±ol > conteoIngles ? "Espa√±ol" : 
                                                 conteoIngles > conteoEspa√±ol ? "Ingl√©s" : "Mixto/Indeterminado";

                return caracteristicas;
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "Error al analizar caracter√≠sticas del contenido");
                return new CaracteristicasContenido 
                { 
                    ComplejidadLectura = "Indeterminada", 
                    IdiomaDetectado = "Indeterminado" 
                };
            }
        }

        private string CategorizarDocumento(string contenido)
        {
            var contenidoLower = contenido.ToLowerInvariant();

            var categorias = new Dictionary<string, string[]>
            {
                ["üìã Manual/Gu√≠a"] = new[] { "manual", "instrucciones", "gu√≠a", "procedimiento", "paso a paso", "c√≥mo", "tutorial" },
                ["üìä Informe/An√°lisis"] = new[] { "informe", "reporte", "an√°lisis", "estudio", "investigaci√≥n", "estad√≠stica", "conclusi√≥n", "resultado" },
                ["üíº Documento Comercial"] = new[] { "propuesta", "cotizaci√≥n", "presupuesto", "factura", "contrato", "acuerdo", "venta", "cliente" },
                ["üè¢ Documento Corporativo"] = new[] { "pol√≠tica", "proceso", "empresa", "organizaci√≥n", "corporativo", "empleado", "recursos humanos" },
                ["üìö Material Educativo"] = new[] { "capacitaci√≥n", "entrenamiento", "curso", "formaci√≥n", "aprendizaje", "conocimiento", "competencia" },
                ["üîß Documentaci√≥n T√©cnica"] = new[] { "especificaci√≥n", "t√©cnico", "sistema", "software", "hardware", "configuraci√≥n", "instalaci√≥n" },
                ["üìà Financiero"] = new[] { "financiero", "presupuesto", "costo", "precio", "inversi√≥n", "ganancia", "p√©rdida", "balance" },
                ["üìã Cat√°logo/Producto"] = new[] { "cat√°logo", "producto", "caracter√≠sticas", "modelo", "especificaciones", "colch√≥n", "gomarco" }
            };

            foreach (var categoria in categorias)
            {
                var coincidencias = categoria.Value.Count(palabra => contenidoLower.Contains(palabra));
                if (coincidencias >= 2) // Al menos 2 palabras clave
                {
                    return categoria.Key;
                }
            }

            return string.Empty;
        }

        private string AnalizarIntencionUsuario(string mensaje)
        {
            var mensajeLower = mensaje.ToLowerInvariant();

            var intenciones = new Dictionary<string, string[]>
            {
                ["busqueda"] = new[] { "buscar", "encontrar", "localizar", "donde", "ubicar", "hallar" },
                ["explicacion"] = new[] { "qu√© es", "c√≥mo", "explicar", "definir", "significado", "concepto" },
                ["comparacion"] = new[] { "comparar", "diferencia", "mejor", "peor", "versus", "vs", "diferente" },
                ["listado"] = new[] { "listar", "enumerar", "mostrar", "cu√°les", "todos", "lista" },
                ["resumen"] = new[] { "resumir", "resumen", "sintetizar", "principales", "importante", "clave" },
                ["detalle"] = new[] { "detallar", "detalles", "espec√≠fico", "profundidad", "completo", "exhaustivo" },
                ["procedimiento"] = new[] { "c√≥mo hacer", "pasos", "proceso", "procedimiento", "m√©todo", "instrucciones" },
                ["recomendacion"] = new[] { "recomendar", "sugerir", "aconsejar", "mejor opci√≥n", "qu√© elegir" }
            };

            foreach (var intencion in intenciones)
            {
                if (intencion.Value.Any(palabra => mensajeLower.Contains(palabra)))
                {
                    return intencion.Key;
                }
            }

            return "general";
        }

        private List<string> ExtraerPalabrasClave(string mensaje)
        {
            var palabrasComunes = new HashSet<string> 
            { 
                "el", "la", "de", "que", "y", "a", "en", "un", "es", "se", "no", "te", "lo", "le", "da", "su", "por", "son", "con", "para", "al", "una", "las", "del", "los",
                "me", "mi", "tu", "si", "como", "m√°s", "pero", "muy", "ser", "todo", "ya", "sobre", "esto", "qu√©", "c√≥mo", "d√≥nde", "cu√°ndo", "por qu√©", "puedes", "puede"
            };

            return Regex.Matches(mensaje.ToLowerInvariant(), @"\b[a-z√°√©√≠√≥√∫√±√º]{3,}\b")
                .Cast<Match>()
                .Select(m => m.Value)
                .Where(p => !palabrasComunes.Contains(p))
                .Distinct()
                .ToList();
        }

        private async Task<List<ResultadoBusqueda>> BuscarEnArchivosAsync(List<string> palabrasClave, List<ArchivoSubido> archivos)
        {
            var resultados = new List<ResultadoBusqueda>();

            foreach (var archivo in archivos)
            {
                try
                {
                    // Solo buscar en archivos de texto por ahora
                    if (!_servicioExtraccion.EsTipoCompatible(archivo.TipoContenido))
                        continue;

                    var rutaTemporal = await _servicioArchivos.DescargarArchivoTemporalAsync(archivo.Id);
                    var contenido = await _servicioExtraccion.ExtraerTextoAsync(rutaTemporal, archivo.TipoContenido);

                    // Limpiar archivo temporal
                    if (File.Exists(rutaTemporal))
                        File.Delete(rutaTemporal);

                    if (string.IsNullOrWhiteSpace(contenido))
                        continue;

                    // Buscar coincidencias
                    var coincidencias = BuscarCoincidenciasEnTexto(contenido, palabrasClave);

                    foreach (var coincidencia in coincidencias)
                    {
                        resultados.Add(new ResultadoBusqueda
                        {
                            NombreArchivo = archivo.NombreOriginal,
                            ContextoEncontrado = coincidencia.Contexto,
                            PorcentajeRelevancia = coincidencia.Relevancia,
                            TipoArchivo = archivo.TipoContenido,
                            PosicionEnDocumento = coincidencia.Posicion
                        });
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogWarning(ex, "Error al buscar en archivo: {Archivo}", archivo.NombreOriginal);
                }
            }

            return resultados.OrderByDescending(r => r.PorcentajeRelevancia).ToList();
        }

        private List<CoincidenciaTexto> BuscarCoincidenciasEnTexto(string contenido, List<string> palabrasClave)
        {
            var coincidencias = new List<CoincidenciaTexto>();
            var lineas = contenido.Split('\n', StringSplitOptions.RemoveEmptyEntries);

            for (int i = 0; i < lineas.Length; i++)
            {
                var linea = lineas[i];
                var lineaLower = linea.ToLowerInvariant();
                
                var palabrasEncontradas = palabrasClave.Count(p => lineaLower.Contains(p.ToLowerInvariant()));
                
                if (palabrasEncontradas > 0)
                {
                    // Crear contexto con l√≠neas adyacentes
                    var inicioContexto = Math.Max(0, i - 2);
                    var finContexto = Math.Min(lineas.Length - 1, i + 2);
                    
                    var contexto = string.Join("\n", lineas[inicioContexto..(finContexto + 1)]);
                    var relevancia = (float)palabrasEncontradas / palabrasClave.Count * 100;

                    coincidencias.Add(new CoincidenciaTexto
                    {
                        Contexto = contexto.Length > 300 ? contexto.Substring(0, 300) + "..." : contexto,
                        Relevancia = relevancia,
                        Posicion = i
                    });
                }
            }

            return coincidencias.Where(c => c.Relevancia >= 20) // Solo mostrar coincidencias con al menos 20% de relevancia
                              .OrderByDescending(c => c.Relevancia)
                              .Take(5)
                              .ToList();
        }

        private string GenerarRespuestaBasadaEnContexto(string mensaje, List<ResultadoBusqueda> resultados, string intencion)
        {
            if (!resultados.Any()) return string.Empty;

            var respuesta = new StringBuilder();
            
            try
            {
                // AN√ÅLISIS ESPEC√çFICO PARA TRABAJADORES
                var datosEspecificos = AnalizarDatosEnResultados(resultados);
                
                switch (intencion)
                {
                    case "explicacion":
                        respuesta.AppendLine("üìã **EXPLICACI√ìN BASADA EN LOS DOCUMENTOS:**");
                        respuesta.AppendLine();
                        respuesta.AppendLine(SintetizarExplicacionParaTrabajador(resultados, datosEspecificos));
                        break;

                    case "resumen":
                        respuesta.AppendLine("üìä **RESUMEN DE INFORMACI√ìN CLAVE:**");
                        respuesta.AppendLine();
                        respuesta.AppendLine(GenerarResumenOrientadoTrabajador(resultados, datosEspecificos));
                        break;

                    case "listado":
                        respuesta.AppendLine("üìù **ELEMENTOS IDENTIFICADOS:**");
                        respuesta.AppendLine();
                        respuesta.AppendLine(ExtraerElementosParaTrabajador(resultados, datosEspecificos));
                        break;

                    case "comparacion":
                        if (resultados.Count >= 2)
                        {
                            respuesta.AppendLine("‚öñÔ∏è **COMPARACI√ìN DE DATOS:**");
                            respuesta.AppendLine();
                            respuesta.AppendLine(GenerarComparacionTrabajador(resultados, datosEspecificos));
                        }
                        break;

                    case "busqueda":
                        respuesta.AppendLine("üîç **INFORMACI√ìN ENCONTRADA:**");
                        respuesta.AppendLine();
                        respuesta.AppendLine(GenerarRespuestaBusquedaTrabajador(resultados, datosEspecificos));
                        break;

                    default:
                        respuesta.AppendLine("üíº **INFORMACI√ìN DISPONIBLE PARA TU TRABAJO:**");
                        respuesta.AppendLine();
                        respuesta.AppendLine(GenerarRespuestaGeneralTrabajador(resultados, datosEspecificos));
                        break;
                }

                // DATOS ESPEC√çFICOS ENCONTRADOS
                if (datosEspecificos.TieneInformacionEspecifica())
                {
                    respuesta.AppendLine();
                    respuesta.AppendLine("üéØ **DATOS ESPEC√çFICOS DETECTADOS:**");
                    
                    if (datosEspecificos.PreciosEncontrados.Any())
                    {
                        respuesta.AppendLine($"üí∞ **Precios:** {string.Join(", ", datosEspecificos.PreciosEncontrados.Take(3))}");
                    }
                    
                    if (datosEspecificos.FechasEncontradas.Any())
                    {
                        respuesta.AppendLine($"üìÖ **Fechas:** {string.Join(", ", datosEspecificos.FechasEncontradas.Take(3))}");
                    }
                    
                    if (datosEspecificos.ContactosEncontrados.Any())
                    {
                        respuesta.AppendLine($"üìû **Contactos:** {string.Join(", ", datosEspecificos.ContactosEncontrados.Take(2))}");
                    }
                    
                    if (datosEspecificos.NumerosEncontrados.Any())
                    {
                        respuesta.AppendLine($"üî¢ **Cantidades:** {string.Join(", ", datosEspecificos.NumerosEncontrados.Take(3))}");
                    }
                }

                // ACCIONES SUGERIDAS
                var accionesSugeridas = GenerarAccionesSugeridasParaTrabajador(mensaje, resultados, datosEspecificos);
                if (accionesSugeridas.Any())
                {
                    respuesta.AppendLine();
                    respuesta.AppendLine("üí° **ACCIONES SUGERIDAS:**");
                    foreach (var accion in accionesSugeridas.Take(3))
                    {
                        respuesta.AppendLine($"‚Ä¢ {accion}");
                    }
                }

                return respuesta.ToString();
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "Error al generar respuesta basada en contexto");
                return "Encontr√© informaci√≥n relevante, pero tuve dificultades para procesarla completamente. ¬øPodr√≠as ser m√°s espec√≠fico en tu consulta?";
            }
        }

        private List<string> GenerarSugerenciasBusqueda(string intencion, List<ArchivoSubido> archivos)
        {
            var sugerencias = new List<string>();

            try
            {
                // Sugerencias basadas en tipos de archivos disponibles
                var tiposArchivos = archivos.Select(a => DeterminarTipoAnalisis(a.TipoContenido)).Distinct().ToList();

                foreach (var tipo in tiposArchivos.Take(3))
                {
                    switch (tipo)
                    {
                        case "üìÑ Documento PDF":
                            sugerencias.Add("Intenta buscar por temas espec√≠ficos como 'proceso', 'procedimiento' o nombres de secciones");
                            break;
                        case "üìä Hoja Excel (.xlsx)":
                            sugerencias.Add("Busca por datos num√©ricos, nombres de columnas o informaci√≥n espec√≠fica de tablas");
                            break;
                        case "üìù Documento Word (.docx)":
                            sugerencias.Add("Prueba con palabras clave del t√≠tulo, encabezados o contenido principal");
                            break;
                    }
                }

                // Sugerencias basadas en la intenci√≥n
                switch (intencion)
                {
                    case "busqueda":
                        sugerencias.Add("Usa t√©rminos m√°s espec√≠ficos o combina varias palabras clave");
                        break;
                    case "explicacion":
                        sugerencias.Add("Pregunta '¬øqu√© es [t√©rmino espec√≠fico]?' o '¬øc√≥mo funciona [proceso]?'");
                        break;
                    case "listado":
                        sugerencias.Add("Pregunta 'lista de', 'cu√°les son' o 'enumera los'");
                        break;
                }

                // Sugerencias generales
                if (!sugerencias.Any())
                {
                    sugerencias.AddRange(new[]
                    {
                        "Menciona un archivo espec√≠fico por su nombre",
                        "Usa palabras clave m√°s espec√≠ficas relacionadas con tu b√∫squeda",
                        "Pregunta por un tema o concepto particular"
                    });
                }

                return sugerencias.Take(4).ToList();
            }
            catch
            {
                return new List<string> { "Intenta ser m√°s espec√≠fico en tu consulta" };
            }
        }

        #endregion

        #region M√©todos auxiliares para generaci√≥n de respuestas

        private string SintetizarExplicacion(List<ResultadoBusqueda> resultados)
        {
            var explicacion = new StringBuilder();
            
            // Combinar contextos m√°s relevantes
            var contextosRelevantes = resultados.Take(2).Select(r => r.ContextoEncontrado).ToList();
            
            if (contextosRelevantes.Any())
            {
                var contenidoCombinado = string.Join("\n\n", contextosRelevantes);
                var primerasLineas = contenidoCombinado.Split('\n').Take(5);
                
                foreach (var linea in primerasLineas)
                {
                    if (!string.IsNullOrWhiteSpace(linea))
                    {
                        explicacion.AppendLine($"‚Ä¢ {linea.Trim()}");
                    }
                }
            }
            
            return explicacion.ToString();
        }

        private string GenerarResumenDeResultados(List<ResultadoBusqueda> resultados)
        {
            var resumen = new StringBuilder();
            
            var puntosUnicos = new HashSet<string>();
            
            foreach (var resultado in resultados.Take(3))
            {
                var lineas = resultado.ContextoEncontrado.Split('\n', StringSplitOptions.RemoveEmptyEntries);
                foreach (var linea in lineas.Take(2))
                {
                    var lineaLimpia = linea.Trim();
                    if (lineaLimpia.Length > 10 && puntosUnicos.Add(lineaLimpia))
                    {
                        resumen.AppendLine($"‚Ä¢ {lineaLimpia}");
                    }
                }
            }
            
            return resumen.ToString();
        }

        private string ExtraerElementosListado(List<ResultadoBusqueda> resultados)
        {
            var elementos = new StringBuilder();
            var listasEncontradas = new HashSet<string>();
            
            foreach (var resultado in resultados)
            {
                var lineas = resultado.ContextoEncontrado.Split('\n');
                foreach (var linea in lineas)
                {
                    var lineaTrimmed = linea.Trim();
                    if ((lineaTrimmed.StartsWith("‚Ä¢") || lineaTrimmed.StartsWith("-") || 
                         Regex.IsMatch(lineaTrimmed, @"^\d+\.")) && 
                        listasEncontradas.Add(lineaTrimmed))
                    {
                        elementos.AppendLine(lineaTrimmed);
                    }
                }
            }
            
            return elementos.Length > 0 ? elementos.ToString() : 
                   "No se encontraron listas espec√≠ficas, pero hay informaci√≥n relevante en los contextos mostrados arriba.";
        }

        private string GenerarComparacion(List<ResultadoBusqueda> resultados)
        {
            var comparacion = new StringBuilder();
            
            if (resultados.Count >= 2)
            {
                comparacion.AppendLine($"**Archivo 1 ({resultados[0].NombreArchivo}):**");
                comparacion.AppendLine(resultados[0].ContextoEncontrado.Split('\n').First());
                comparacion.AppendLine();
                
                comparacion.AppendLine($"**Archivo 2 ({resultados[1].NombreArchivo}):**");
                comparacion.AppendLine(resultados[1].ContextoEncontrado.Split('\n').First());
                comparacion.AppendLine();
                
                comparacion.AppendLine("*Para una comparaci√≥n m√°s detallada, especifica qu√© aspectos te interesan comparar.*");
            }
            
            return comparacion.ToString();
        }

        private string GenerarRespuestaGeneral(List<ResultadoBusqueda> resultados)
        {
            var respuesta = new StringBuilder();
            
            var mejorResultado = resultados.First();
            var primerasLineas = mejorResultado.ContextoEncontrado.Split('\n')
                .Where(l => !string.IsNullOrWhiteSpace(l))
                .Take(3);
            
            foreach (var linea in primerasLineas)
            {
                respuesta.AppendLine(linea.Trim());
            }
            
            if (resultados.Count > 1)
            {
                respuesta.AppendLine();
                respuesta.AppendLine($"Tambi√©n encontr√© informaci√≥n relacionada en {resultados.Count - 1} archivo(s) adicional(es).");
            }
            
            return respuesta.ToString();
        }

        #endregion

        #region M√©todos espec√≠ficos para trabajadores

        private Dictionary<string, string> ExtraerDatosEspecificosNegocio(string contenido, string tipoContenido)
        {
            var datos = new Dictionary<string, string>();

            try
            {
                var contenidoLower = contenido.ToLowerInvariant();

                // PRODUCTOS GOMARCO
                if (contenidoLower.Contains("colch√≥n") || contenidoLower.Contains("colchon") || contenidoLower.Contains("gomarco"))
                {
                    var modelos = ExtraerModelos(contenido);
                    if (modelos.Any())
                        datos["Modelos de Colchones"] = string.Join(", ", modelos.Take(3));
                }

                // EMPRESA Y ORGANIZACI√ìN
                var empresa = ExtraerInformacionEmpresa(contenido);
                if (!string.IsNullOrEmpty(empresa))
                    datos["Informaci√≥n de Empresa"] = empresa;

                // C√ìDIGOS Y REFERENCIAS
                var codigos = ExtraerCodigos(contenido);
                if (codigos.Any())
                    datos["C√≥digos/Referencias"] = string.Join(", ", codigos.Take(5));

                // UBICACIONES Y DIRECCIONES
                var ubicaciones = ExtraerUbicaciones(contenido);
                if (ubicaciones.Any())
                    datos["Ubicaciones"] = string.Join(", ", ubicaciones.Take(3));

                // RESPONSABLES Y ROLES
                var responsables = ExtraerResponsables(contenido);
                if (responsables.Any())
                    datos["Personal/Responsables"] = string.Join(", ", responsables.Take(3));

                return datos;
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "Error extrayendo datos espec√≠ficos del negocio");
                return datos;
            }
        }

        private InformacionActionable ExtraerInformacionActionable(string contenido)
        {
            var info = new InformacionActionable();

            try
            {
                // PRECIOS Y COSTOS
                info.Precios = ExtraerPrecios(contenido);

                // FECHAS IMPORTANTES
                info.Fechas = ExtraerFechasImportantes(contenido);

                // CONTACTOS
                info.Contactos = ExtraerContactos(contenido);

                // PROCEDIMIENTOS Y PASOS
                info.Procedimientos = ExtraerProcedimientos(contenido);

                // N√öMEROS Y CANTIDADES
                info.Numeros = ExtraerNumerosRelevantes(contenido);

                return info;
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "Error extrayendo informaci√≥n actionable");
                return info;
            }
        }

        private List<string> ExtraerPrecios(string contenido)
        {
            var precios = new List<string>();

            try
            {
                // Patrones de precios comunes
                var patronesPrecios = new[]
                {
                    @"(\$[\d,]+\.?\d*)",                    // $1,234.56
                    @"([\d,]+\.?\d*\s*‚Ç¨)",                  // 1234.56 ‚Ç¨
                    @"([\d,]+\.?\d*\s*pesos)",              // 1234 pesos
                    @"(precio[:\s]+[\$]?[\d,]+\.?\d*)",     // precio: $1234
                    @"(costo[:\s]+[\$]?[\d,]+\.?\d*)",      // costo: 1234
                    @"(vale[:\s]+[\$]?[\d,]+\.?\d*)"        // vale: $1234
                };

                var lineas = contenido.Split('\n');
                
                foreach (var linea in lineas)
                {
                    foreach (var patron in patronesPrecios)
                    {
                        var coincidencias = Regex.Matches(linea, patron, RegexOptions.IgnoreCase);
                        foreach (Match coincidencia in coincidencias)
                        {
                            var contexto = linea.Trim();
                            if (contexto.Length > 80)
                                contexto = contexto.Substring(0, 80) + "...";
                            
                            precios.Add(contexto);
                        }
                    }
                }

                return precios.Distinct().Take(10).ToList();
            }
            catch
            {
                return precios;
            }
        }

        private List<string> ExtraerFechasImportantes(string contenido)
        {
            var fechas = new List<string>();

            try
            {
                var patronesFechas = new[]
                {
                    @"(\d{1,2}\/\d{1,2}\/\d{4})",                    // dd/mm/yyyy
                    @"(\d{1,2}-\d{1,2}-\d{4})",                      // dd-mm-yyyy
                    @"(vence[:\s]+\d{1,2}\/\d{1,2}\/\d{4})",         // vence: dd/mm/yyyy
                    @"(v√°lido hasta[:\s]+\d{1,2}\/\d{1,2}\/\d{4})",  // v√°lido hasta: dd/mm/yyyy
                    @"(fecha[:\s]+\d{1,2}\/\d{1,2}\/\d{4})"          // fecha: dd/mm/yyyy
                };

                var lineas = contenido.Split('\n');
                
                foreach (var linea in lineas)
                {
                    foreach (var patron in patronesFechas)
                    {
                        var coincidencias = Regex.Matches(linea, patron, RegexOptions.IgnoreCase);
                        foreach (Match coincidencia in coincidencias)
                        {
                            var contexto = linea.Trim();
                            if (contexto.Length > 60)
                                contexto = contexto.Substring(0, 60) + "...";
                            
                            fechas.Add(contexto);
                        }
                    }
                }

                return fechas.Distinct().Take(10).ToList();
            }
            catch
            {
                return fechas;
            }
        }

        private List<string> ExtraerContactos(string contenido)
        {
            var contactos = new List<string>();

            try
            {
                var patronesContacto = new[]
                {
                    @"(\d{3}-\d{3}-\d{4})",                    // 123-456-7890
                    @"(\(\d{3}\)\s*\d{3}-\d{4})",              // (123) 456-7890
                    @"([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})", // email
                    @"(tel[√©efono]*[:\s]+[\d\s\-\(\)]+)",       // tel√©fono: 123-456
                    @"(contacto[:\s]+[a-zA-Z\s]+)",             // contacto: Juan P√©rez
                    @"(email[:\s]+[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})" // email:
                };

                var lineas = contenido.Split('\n');
                
                foreach (var linea in lineas)
                {
                    foreach (var patron in patronesContacto)
                    {
                        var coincidencias = Regex.Matches(linea, patron, RegexOptions.IgnoreCase);
                        foreach (Match coincidencia in coincidencias)
                        {
                            var contexto = linea.Trim();
                            if (contexto.Length > 70)
                                contexto = contexto.Substring(0, 70) + "...";
                            
                            contactos.Add(contexto);
                        }
                    }
                }

                return contactos.Distinct().Take(8).ToList();
            }
            catch
            {
                return contactos;
            }
        }

        private List<string> ExtraerProcedimientos(string contenido)
        {
            var procedimientos = new List<string>();

            try
            {
                var lineas = contenido.Split('\n');
                
                foreach (var linea in lineas)
                {
                    var lineaLimpia = linea.Trim();
                    
                    // Buscar l√≠neas que parezcan pasos de procedimiento
                    if (Regex.IsMatch(lineaLimpia, @"^(\d+\.|\d+\)|-|\‚Ä¢)\s+", RegexOptions.IgnoreCase) ||
                        lineaLimpia.ToLowerInvariant().Contains("paso") ||
                        lineaLimpia.ToLowerInvariant().StartsWith("primero") ||
                        lineaLimpia.ToLowerInvariant().StartsWith("segundo") ||
                        lineaLimpia.ToLowerInvariant().StartsWith("luego") ||
                        lineaLimpia.ToLowerInvariant().StartsWith("despu√©s"))
                    {
                        if (lineaLimpia.Length > 10 && lineaLimpia.Length < 150)
                        {
                            procedimientos.Add(lineaLimpia);
                        }
                    }
                }

                return procedimientos.Distinct().Take(8).ToList();
            }
            catch
            {
                return procedimientos;
            }
        }

        private List<string> ExtraerNumerosRelevantes(string contenido)
        {
            var numeros = new List<string>();

            try
            {
                var patronesNumeros = new[]
                {
                    @"(cantidad[:\s]+\d+)",          // cantidad: 50
                    @"(stock[:\s]+\d+)",             // stock: 25
                    @"(disponible[:\s]+\d+)",        // disponible: 10
                    @"(\d+\s*unidades)",             // 50 unidades
                    @"(\d+\s*kg)",                   // 25 kg
                    @"(\d+\s*cm)",                   // 180 cm
                    @"(\d+\s*%)",                    // 25%
                    @"(c√≥digo[:\s]+\d+)",            // c√≥digo: 12345
                    @"(referencia[:\s]+[\w\d]+)"     // referencia: ABC123
                };

                var lineas = contenido.Split('\n');
                
                foreach (var linea in lineas)
                {
                    foreach (var patron in patronesNumeros)
                    {
                        var coincidencias = Regex.Matches(linea, patron, RegexOptions.IgnoreCase);
                        foreach (Match coincidencia in coincidencias)
                        {
                            var contexto = linea.Trim();
                            if (contexto.Length > 60)
                                contexto = contexto.Substring(0, 60) + "...";
                            
                            numeros.Add(contexto);
                        }
                    }
                }

                return numeros.Distinct().Take(10).ToList();
            }
            catch
            {
                return numeros;
            }
        }

        private List<string> GenerarSugerenciasConsultaEspecificas(string contenido, string tipoContenido)
        {
            var sugerencias = new List<string>();

            try
            {
                var contenidoLower = contenido.ToLowerInvariant();

                // Sugerencias basadas en contenido detectado
                if (contenidoLower.Contains("precio") || contenidoLower.Contains("costo") || contenidoLower.Contains("$"))
                    sugerencias.Add("¬øCu√°les son los precios?");

                if (contenidoLower.Contains("colch√≥n") || contenidoLower.Contains("modelo"))
                    sugerencias.Add("¬øQu√© modelos de colchones hay?");

                if (contenidoLower.Contains("fecha") || Regex.IsMatch(contenidoLower, @"\d{1,2}\/\d{1,2}\/\d{4}"))
                    sugerencias.Add("¬øCu√°les son las fechas importantes?");

                if (contenidoLower.Contains("contacto") || contenidoLower.Contains("tel√©fono") || contenidoLower.Contains("email"))
                    sugerencias.Add("¬øC√≥mo puedo contactar?");

                if (contenidoLower.Contains("paso") || contenidoLower.Contains("procedimiento") || contenidoLower.Contains("instrucci√≥n"))
                    sugerencias.Add("¬øCu√°les son los pasos a seguir?");

                if (contenidoLower.Contains("cantidad") || contenidoLower.Contains("stock") || Regex.IsMatch(contenidoLower, @"\d+\s*unidades"))
                    sugerencias.Add("¬øQu√© cantidades est√°n disponibles?");

                // Sugerencias por tipo de archivo
                switch (tipoContenido)
                {
                    case "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
                        sugerencias.Add("Mostrar datos de la tabla principal");
                        break;
                    case "application/pdf":
                        sugerencias.Add("Resumir las secciones importantes");
                        break;
                    case "text/csv":
                        sugerencias.Add("¬øCu√°les son los elementos principales?");
                        break;
                }

                // Sugerencias generales √∫tiles
                if (sugerencias.Count < 3)
                {
                    sugerencias.AddRange(new[]
                    {
                        "¬øQu√© informaci√≥n clave contiene?",
                        "Buscar datos espec√≠ficos sobre...",
                        "¬øHay n√∫meros importantes que destacar?"
                    });
                }

                return sugerencias.Take(5).ToList();
            }
            catch
            {
                return new List<string> { "¬øQu√© informaci√≥n espec√≠fica necesitas?" };
            }
        }

        #region M√©todos auxiliares para extracci√≥n espec√≠fica

        private List<string> ExtraerModelos(string contenido)
        {
            var modelos = new List<string>();
            
            var patronesModelo = new[]
            {
                @"(colch√≥n\s+[\w\s]+)",
                @"(modelo\s+[\w\s]+)",
                @"(serie\s+[\w\s]+)"
            };

            foreach (var patron in patronesModelo)
            {
                var coincidencias = Regex.Matches(contenido, patron, RegexOptions.IgnoreCase);
                foreach (Match coincidencia in coincidencias)
                {
                    var modelo = coincidencia.Value.Trim();
                    if (modelo.Length > 5 && modelo.Length < 50)
                        modelos.Add(modelo);
                }
            }

            return modelos.Distinct().ToList();
        }

        private string ExtraerInformacionEmpresa(string contenido)
        {
            var lineas = contenido.Split('\n');
            
            foreach (var linea in lineas)
            {
                if (linea.ToLowerInvariant().Contains("gomarco") && linea.Length < 100)
                {
                    return linea.Trim();
                }
            }

            return string.Empty;
        }

        private List<string> ExtraerCodigos(string contenido)
        {
            var codigos = new List<string>();
            
            var patronesCodigo = new[]
            {
                @"(c√≥digo[:\s]+[\w\d-]+)",
                @"(ref[:\s]+[\w\d-]+)",
                @"(sku[:\s]+[\w\d-]+)",
                @"([A-Z]{2,}\d{3,})"
            };

            foreach (var patron in patronesCodigo)
            {
                var coincidencias = Regex.Matches(contenido, patron, RegexOptions.IgnoreCase);
                foreach (Match coincidencia in coincidencias)
                {
                    codigos.Add(coincidencia.Value.Trim());
                }
            }

            return codigos.Distinct().Take(10).ToList();
        }

        private List<string> ExtraerUbicaciones(string contenido)
        {
            var ubicaciones = new List<string>();
            
            var lineas = contenido.Split('\n');
            
            foreach (var linea in lineas)
            {
                if ((linea.ToLowerInvariant().Contains("direcci√≥n") || 
                     linea.ToLowerInvariant().Contains("ubicaci√≥n") ||
                     linea.ToLowerInvariant().Contains("calle") ||
                     linea.ToLowerInvariant().Contains("av.") ||
                     linea.ToLowerInvariant().Contains("avenida")) && linea.Length < 100)
                {
                    ubicaciones.Add(linea.Trim());
                }
            }

            return ubicaciones.Take(5).ToList();
        }

        private List<string> ExtraerResponsables(string contenido)
        {
            var responsables = new List<string>();
            
            var patronesResponsables = new[]
            {
                @"(responsable[:\s]+[a-zA-Z\s]+)",
                @"(encargado[:\s]+[a-zA-Z\s]+)",
                @"(supervisor[:\s]+[a-zA-Z\s]+)",
                @"(gerente[:\s]+[a-zA-Z\s]+)"
            };

            foreach (var patron in patronesResponsables)
            {
                var coincidencias = Regex.Matches(contenido, patron, RegexOptions.IgnoreCase);
                foreach (Match coincidencia in coincidencias)
                {
                    var responsable = coincidencia.Value.Trim();
                    if (responsable.Length > 10 && responsable.Length < 60)
                        responsables.Add(responsable);
                }
            }

            return responsables.Distinct().Take(5).ToList();
        }

        #endregion

        #endregion

        #region Clases auxiliares para an√°lisis sem√°ntico

        public class CaracteristicasContenido
        {
            public string ComplejidadLectura { get; set; } = string.Empty;
            public string IdiomaDetectado { get; set; } = string.Empty;
        }

        public class ResultadoBusqueda
        {
            public string NombreArchivo { get; set; } = string.Empty;
            public string ContextoEncontrado { get; set; } = string.Empty;
            public float PorcentajeRelevancia { get; set; }
            public string TipoArchivo { get; set; } = string.Empty;
            public int PosicionEnDocumento { get; set; }
        }

        public class CoincidenciaTexto
        {
            public string Contexto { get; set; } = string.Empty;
            public float Relevancia { get; set; }
            public int Posicion { get; set; }
        }

        public class InformacionActionable
        {
            public List<string> Precios { get; set; } = new();
            public List<string> Fechas { get; set; } = new();
            public List<string> Contactos { get; set; } = new();
            public List<string> Procedimientos { get; set; } = new();
            public List<string> Numeros { get; set; } = new();
        }

        public class DatosEspecificosTrabajador
        {
            public List<string> PreciosEncontrados { get; set; } = new();
            public List<string> FechasEncontradas { get; set; } = new();
            public List<string> ContactosEncontrados { get; set; } = new();
            public List<string> NumerosEncontrados { get; set; } = new();
            public List<string> CodigosEncontrados { get; set; } = new();
            public List<string> ProcedimientosEncontrados { get; set; } = new();

            public bool TieneInformacionEspecifica()
            {
                return PreciosEncontrados.Any() || FechasEncontradas.Any() || 
                       ContactosEncontrados.Any() || NumerosEncontrados.Any() || 
                       CodigosEncontrados.Any() || ProcedimientosEncontrados.Any();
            }
        }

        #endregion

        #region Nuevos m√©todos para IA avanzada

        public async Task<string> ProcesarMensajeConIAAsync(string mensaje, string contextoArchivos = "", List<MensajeChat>? historialConversacion = null)
        {
            try
            {
                return await _servicioIA.GenerarRespuestaAsync(mensaje, contextoArchivos, historialConversacion);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error al procesar mensaje con IA");
                return GenerarRespuestaGeneral(mensaje);
            }
        }

        public async Task<string> AnalizarMultiplesArchivosConIAAsync(List<ArchivoSubido> archivos, string pregunta)
        {
            try
            {
                if (!_servicioIA.EstaDisponible())
                {
                    return await ProcesarMultiplesArchivosAsync(archivos);
                }

                var contenidoCombinado = new StringBuilder();
                
                foreach (var archivo in archivos)
                {
                    try
                    {
                        var rutaTemporal = await _servicioArchivos.DescargarArchivoTemporalAsync(archivo.Id);
                        
                        if (_servicioExtraccion.EsTipoCompatible(archivo.TipoContenido))
                        {
                            var contenido = await _servicioExtraccion.ExtraerTextoAsync(rutaTemporal, archivo.TipoContenido);
                            
                            contenidoCombinado.AppendLine($"=== ARCHIVO: {archivo.NombreOriginal} ===");
                            contenidoCombinado.AppendLine(contenido);
                            contenidoCombinado.AppendLine();
                        }
                        
                        // Limpiar archivo temporal
                        if (File.Exists(rutaTemporal))
                            File.Delete(rutaTemporal);
                    }
                    catch (Exception ex)
                    {
                        _logger.LogWarning(ex, "Error al procesar archivo {Nombre}", archivo.NombreOriginal);
                        contenidoCombinado.AppendLine($"=== ERROR AL PROCESAR: {archivo.NombreOriginal} ===");
                    }
                }

                return await _servicioIA.AnalizarContenidoConIAAsync(contenidoCombinado.ToString(), pregunta);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error al analizar m√∫ltiples archivos con IA");
                return await ProcesarMultiplesArchivosAsync(archivos);
            }
        }

        public void ConfigurarClaveIA(string apiKey)
        {
            try
            {
                _servicioIA.ConfigurarClave(apiKey);
                _logger.LogInformation("Clave de IA configurada exitosamente");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error al configurar clave de IA");
            }
        }

        public bool EstaIADisponible()
        {
            return _servicioIA.EstaDisponible();
        }

        private async Task<string> ObtenerContextoArchivos(List<ArchivoSubido>? archivos)
        {
            if (archivos == null || !archivos.Any())
                return string.Empty;

            var contexto = new StringBuilder();
            
            foreach (var archivo in archivos.Take(5)) // Limitar a 5 archivos para no exceder l√≠mites de tokens
            {
                try
                {
                    var rutaTemporal = await _servicioArchivos.DescargarArchivoTemporalAsync(archivo.Id);
                    
                    if (_servicioExtraccion.EsTipoCompatible(archivo.TipoContenido))
                    {
                        var contenido = await _servicioExtraccion.ExtraerTextoAsync(rutaTemporal, archivo.TipoContenido);
                        
                        // Limitar el contenido para evitar exceder l√≠mites de tokens
                        var contenidoLimitado = contenido.Length > 8000 
                            ? contenido.Substring(0, 8000) + "\n\n[CONTENIDO TRUNCADO...]"
                            : contenido;
                        
                        contexto.AppendLine($"=== ARCHIVO: {archivo.NombreOriginal} ===");
                        contexto.AppendLine(contenidoLimitado);
                        contexto.AppendLine();
                    }
                    
                    // Limpiar archivo temporal
                    if (File.Exists(rutaTemporal))
                        File.Delete(rutaTemporal);
                }
                catch (Exception ex)
                {
                    _logger.LogWarning(ex, "Error al obtener contexto del archivo {Nombre}", archivo.NombreOriginal);
                }
            }

            return contexto.ToString();
        }

        #endregion

        #region M√©todos auxiliares orientados a trabajadores

        private DatosEspecificosTrabajador AnalizarDatosEnResultados(List<ResultadoBusqueda> resultados)
        {
            var datos = new DatosEspecificosTrabajador();

            foreach (var resultado in resultados)
            {
                var contexto = resultado.ContextoEncontrado;
                
                // Extraer precios
                var precios = Regex.Matches(contexto, @"(\$[\d,]+\.?\d*|[\d,]+\.?\d*\s*‚Ç¨|precio[:\s]+[\$]?[\d,]+\.?\d*)", RegexOptions.IgnoreCase)
                    .Cast<Match>()
                    .Select(m => m.Value.Trim())
                    .Where(p => !string.IsNullOrEmpty(p));
                datos.PreciosEncontrados.AddRange(precios);

                // Extraer fechas
                var fechas = Regex.Matches(contexto, @"(\d{1,2}\/\d{1,2}\/\d{4}|\d{1,2}-\d{1,2}-\d{4})", RegexOptions.IgnoreCase)
                    .Cast<Match>()
                    .Select(m => m.Value.Trim());
                datos.FechasEncontradas.AddRange(fechas);

                // Extraer contactos
                var contactos = Regex.Matches(contexto, @"([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}|\d{3}-\d{3}-\d{4})", RegexOptions.IgnoreCase)
                    .Cast<Match>()
                    .Select(m => m.Value.Trim());
                datos.ContactosEncontrados.AddRange(contactos);

                // Extraer n√∫meros relevantes
                var numeros = Regex.Matches(contexto, @"(\d+\s*unidades|\d+\s*kg|\d+\s*cm|cantidad[:\s]+\d+|stock[:\s]+\d+)", RegexOptions.IgnoreCase)
                    .Cast<Match>()
                    .Select(m => m.Value.Trim());
                datos.NumerosEncontrados.AddRange(numeros);

                // Extraer c√≥digos
                var codigos = Regex.Matches(contexto, @"(c√≥digo[:\s]+[\w\d-]+|ref[:\s]+[\w\d-]+|[A-Z]{2,}\d{3,})", RegexOptions.IgnoreCase)
                    .Cast<Match>()
                    .Select(m => m.Value.Trim());
                datos.CodigosEncontrados.AddRange(codigos);
            }

            // Limpiar duplicados
            datos.PreciosEncontrados = datos.PreciosEncontrados.Distinct().ToList();
            datos.FechasEncontradas = datos.FechasEncontradas.Distinct().ToList();
            datos.ContactosEncontrados = datos.ContactosEncontrados.Distinct().ToList();
            datos.NumerosEncontrados = datos.NumerosEncontrados.Distinct().ToList();
            datos.CodigosEncontrados = datos.CodigosEncontrados.Distinct().ToList();

            return datos;
        }

        private string SintetizarExplicacionParaTrabajador(List<ResultadoBusqueda> resultados, DatosEspecificosTrabajador datos)
        {
            var explicacion = new StringBuilder();
            
            // Contextualizar la respuesta para trabajadores
            explicacion.AppendLine("**Informaci√≥n relevante para tu trabajo:**");
            explicacion.AppendLine();

            foreach (var resultado in resultados.Take(2))
            {
                var archivo = resultado.NombreArchivo;
                var contexto = resultado.ContextoEncontrado.Split('\n')
                    .Where(l => !string.IsNullOrWhiteSpace(l))
                    .Take(3)
                    .Select(l => l.Trim());

                explicacion.AppendLine($"üìÑ **De: {archivo}**");
                foreach (var linea in contexto)
                {
                    if (linea.Length > 5)
                        explicacion.AppendLine($"‚Ä¢ {linea}");
                }
                explicacion.AppendLine();
            }

            return explicacion.ToString();
        }

        private string GenerarResumenOrientadoTrabajador(List<ResultadoBusqueda> resultados, DatosEspecificosTrabajador datos)
        {
            var resumen = new StringBuilder();
            
            // Puntos clave √∫nicos encontrados
            var puntosUnicos = new HashSet<string>();
            
            foreach (var resultado in resultados.Take(3))
            {
                var lineas = resultado.ContextoEncontrado.Split('\n', StringSplitOptions.RemoveEmptyEntries);
                foreach (var linea in lineas.Take(2))
                {
                    var lineaLimpia = linea.Trim();
                    if (lineaLimpia.Length > 15 && lineaLimpia.Length < 120 && puntosUnicos.Add(lineaLimpia))
                    {
                        resumen.AppendLine($"‚Ä¢ {lineaLimpia}");
                    }
                }
            }
            
            if (!puntosUnicos.Any())
            {
                resumen.AppendLine("‚Ä¢ Informaci√≥n disponible en los documentos analizados");
                resumen.AppendLine("‚Ä¢ Para consultas m√°s espec√≠ficas, usa palabras clave exactas");
            }

            return resumen.ToString();
        }

        private string ExtraerElementosParaTrabajador(List<ResultadoBusqueda> resultados, DatosEspecificosTrabajador datos)
        {
            var elementos = new StringBuilder();
            var listasEncontradas = new HashSet<string>();
            
            foreach (var resultado in resultados)
            {
                var lineas = resultado.ContextoEncontrado.Split('\n');
                foreach (var linea in lineas)
                {
                    var lineaTrimmed = linea.Trim();
                    
                    // Buscar elementos de lista o numerados
                    if ((lineaTrimmed.StartsWith("‚Ä¢") || lineaTrimmed.StartsWith("-") || 
                         Regex.IsMatch(lineaTrimmed, @"^\d+\.") || 
                         lineaTrimmed.ToLowerInvariant().Contains("modelo") ||
                         lineaTrimmed.ToLowerInvariant().Contains("tipo") ||
                         lineaTrimmed.ToLowerInvariant().Contains("producto")) && 
                        listasEncontradas.Add(lineaTrimmed) && lineaTrimmed.Length > 5)
                    {
                        elementos.AppendLine($"‚Ä¢ {lineaTrimmed.Replace("‚Ä¢", "").Replace("-", "").Trim()}");
                    }
                }
            }
            
            if (elementos.Length == 0)
            {
                elementos.AppendLine("‚Ä¢ Los documentos contienen informaci√≥n estructurada");
                elementos.AppendLine("‚Ä¢ Para ver elementos espec√≠ficos, usa t√©rminos como 'lista', 'modelos', o 'productos'");
            }

            return elementos.ToString();
        }

        private string GenerarComparacionTrabajador(List<ResultadoBusqueda> resultados, DatosEspecificosTrabajador datos)
        {
            var comparacion = new StringBuilder();
            
            if (resultados.Count >= 2)
            {
                var archivo1 = resultados[0];
                var archivo2 = resultados[1];

                comparacion.AppendLine($"**üìÑ {archivo1.NombreArchivo}:**");
                var lineas1 = archivo1.ContextoEncontrado.Split('\n')
                    .Where(l => !string.IsNullOrWhiteSpace(l) && l.Length > 10)
                    .Take(2);
                foreach (var linea in lineas1)
                {
                    comparacion.AppendLine($"‚Ä¢ {linea.Trim()}");
                }
                
                comparacion.AppendLine();
                comparacion.AppendLine($"**üìÑ {archivo2.NombreArchivo}:**");
                var lineas2 = archivo2.ContextoEncontrado.Split('\n')
                    .Where(l => !string.IsNullOrWhiteSpace(l) && l.Length > 10)
                    .Take(2);
                foreach (var linea in lineas2)
                {
                    comparacion.AppendLine($"‚Ä¢ {linea.Trim()}");
                }
                
                comparacion.AppendLine();
                comparacion.AppendLine("*Para comparaciones m√°s espec√≠ficas, menciona qu√© aspectos quieres comparar (precios, caracter√≠sticas, fechas, etc.)*");
            }
            
            return comparacion.ToString();
        }

        private string GenerarRespuestaBusquedaTrabajador(List<ResultadoBusqueda> resultados, DatosEspecificosTrabajador datos)
        {
            var respuesta = new StringBuilder();
            
            var mejorResultado = resultados.First();
            
            respuesta.AppendLine($"**üìÑ En: {mejorResultado.NombreArchivo}** (Relevancia: {mejorResultado.PorcentajeRelevancia:F1}%)");
            respuesta.AppendLine();
            
            var lineasRelevantes = mejorResultado.ContextoEncontrado.Split('\n')
                .Where(l => !string.IsNullOrWhiteSpace(l) && l.Length > 10)
                .Take(4);
            
            foreach (var linea in lineasRelevantes)
            {
                respuesta.AppendLine($"‚Ä¢ {linea.Trim()}");
            }
            
            if (resultados.Count > 1)
            {
                respuesta.AppendLine();
                respuesta.AppendLine($"**Tambi√©n encontr√© informaci√≥n relacionada en {resultados.Count - 1} documento(s) adicional(es).**");
            }
            
            return respuesta.ToString();
        }

        private string GenerarRespuestaGeneralTrabajador(List<ResultadoBusqueda> resultados, DatosEspecificosTrabajador datos)
        {
            var respuesta = new StringBuilder();
            
            var mejorResultado = resultados.First();
            
            respuesta.AppendLine($"**üìÑ Fuente principal:** {mejorResultado.NombreArchivo}");
            respuesta.AppendLine();
            
            var primerasLineas = mejorResultado.ContextoEncontrado.Split('\n')
                .Where(l => !string.IsNullOrWhiteSpace(l) && l.Length > 10)
                .Take(3);
            
            respuesta.AppendLine("**Informaci√≥n encontrada:**");
            foreach (var linea in primerasLineas)
            {
                respuesta.AppendLine($"‚Ä¢ {linea.Trim()}");
            }
            
            if (resultados.Count > 1)
            {
                respuesta.AppendLine();
                respuesta.AppendLine($"üìã **Informaci√≥n adicional disponible en {resultados.Count - 1} documento(s) m√°s.**");
                respuesta.AppendLine("*Pregunta por algo m√°s espec√≠fico para obtener detalles adicionales.*");
            }
            
            return respuesta.ToString();
        }

        private List<string> GenerarAccionesSugeridasParaTrabajador(string mensaje, List<ResultadoBusqueda> resultados, DatosEspecificosTrabajador datos)
        {
            var acciones = new List<string>();
            var mensajeLower = mensaje.ToLowerInvariant();

            try
            {
                // Acciones basadas en datos encontrados
                if (datos.PreciosEncontrados.Any())
                {
                    acciones.Add("Consultar precios actualizados con el responsable comercial");
                    acciones.Add("Verificar si estos precios incluyen descuentos o promociones");
                }

                if (datos.FechasEncontradas.Any())
                {
                    acciones.Add("Revisar si las fechas mencionadas est√°n vigentes");
                    acciones.Add("Programar recordatorios para las fechas importantes");
                }

                if (datos.ContactosEncontrados.Any())
                {
                    acciones.Add("Contactar a los responsables mencionados para m√°s detalles");
                    acciones.Add("Guardar la informaci√≥n de contacto en tu agenda");
                }

                if (datos.NumerosEncontrados.Any())
                {
                    acciones.Add("Verificar disponibilidad de stock actual");
                    acciones.Add("Confirmar las cantidades mencionadas");
                }

                // Acciones basadas en la intenci√≥n
                if (mensajeLower.Contains("precio"))
                {
                    acciones.Add("Solicitar lista de precios actualizada");
                    acciones.Add("Consultar sobre descuentos por volumen");
                }

                if (mensajeLower.Contains("stock") || mensajeLower.Contains("disponible"))
                {
                    acciones.Add("Verificar inventario en tiempo real");
                    acciones.Add("Coordinar con almac√©n para confirmar disponibilidad");
                }

                // Acciones generales √∫tiles
                if (!acciones.Any())
                {
                    acciones.AddRange(new[]
                    {
                        "Buscar informaci√≥n m√°s espec√≠fica en los documentos",
                        "Consultar con el responsable del √°rea correspondiente",
                        "Revisar si hay documentos adicionales relacionados"
                    });
                }

                return acciones.Take(4).ToList();
            }
            catch
            {
                return new List<string> { "Revisar la informaci√≥n encontrada y actuar seg√∫n corresponda" };
            }
        }

        #endregion

        private List<string> ExtraerTemasPrincipales(string contenido)
        {
            var temas = new List<string>();
            
            try
            {
                // Buscar palabras frecuentes (excluyendo palabras comunes)
                var palabrasComunes = new HashSet<string> { 
                    "el", "la", "de", "que", "y", "a", "en", "un", "es", "se", "no", "te", "lo", "le", "da", "su", "por", "son", "con", "para", "al", "una", "sur", "con", "las", "del", "los"
                };
                
                var palabras = Regex.Matches(contenido.ToLowerInvariant(), @"\b[a-z√°√©√≠√≥√∫√±√º]{4,}\b")
                    .Cast<Match>()
                    .Select(m => m.Value)
                    .Where(p => !palabrasComunes.Contains(p))
                    .GroupBy(p => p)
                    .Where(g => g.Count() >= 3) // Aparecer al menos 3 veces
                    .OrderByDescending(g => g.Count())
                    .Select(g => char.ToUpper(g.Key[0]) + g.Key.Substring(1))
                    .Take(5)
                    .ToList();

                return palabras;
            }
            catch
            {
                return temas;
            }
        }
    }
} 