using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ChatbotGomarco.Modelos;

namespace ChatbotGomarco.Servicios
{
    public class ServicioChatbot : IServicioChatbot
    {
        private readonly IServicioArchivos _servicioArchivos;
        private readonly ILogger<ServicioChatbot> _logger;
        
        // Respuestas predeterminadas para el chatbot (simulaci√≥n de IA)
        private readonly List<string> _respuestasSaludo = new()
        {
            "¬°Hola! Soy el asistente de IA de GOMARCO. Estoy aqu√≠ para ayudarte con cualquier consulta relacionada con nuestros productos, procesos o documentos. ¬øEn qu√© puedo asistirte hoy?",
            "¬°Buenos d√≠as! Bienvenido al chatbot corporativo de GOMARCO. Puedo ayudarte con consultas sobre colchones, documentos corporativos, o cualquier informaci√≥n que necesites. ¬øC√≥mo puedo ayudarte?",
            "¬°Hola! Soy tu asistente virtual de GOMARCO. Estoy capacitado para ayudarte con informaci√≥n sobre productos, pol√≠ticas de la empresa y an√°lisis de documentos. ¬øQu√© necesitas saber?"
        };

        private readonly Dictionary<string, List<string>> _respuestasTematicas = new()
        {
            ["colchon"] = new()
            {
                "En GOMARCO nos especializamos en colchones de alta calidad. Nuestros productos est√°n dise√±ados para brindar el mejor descanso. ¬øTe interesa alg√∫n modelo en particular?",
                "Los colchones GOMARCO est√°n fabricados con materiales premium y tecnolog√≠a avanzada para garantizar comodidad y durabilidad. ¬øNecesitas informaci√≥n espec√≠fica sobre alg√∫n producto?",
                "Nuestros colchones han sido desarrollados pensando en tu comodidad y salud postural. Como dice nuestro lema: 'Descansa como te mereces'. ¬øQu√© caracter√≠sticas buscas?"
            },
            ["documento"] = new()
            {
                "He analizado el documento que has compartido. Bas√°ndome en el contenido, puedo ayudarte con consultas espec√≠ficas sobre la informaci√≥n contenida.",
                "Perfecto, he procesado el archivo. El documento contiene informaci√≥n valiosa que puedo usar para responder tus preguntas de manera m√°s precisa.",
                "Documento procesado correctamente. Toda la informaci√≥n ha sido analizada y est√° disponible para consultas. ¬øQu√© necesitas saber espec√≠ficamente?"
            },
            ["ayuda"] = new()
            {
                "Puedo ayudarte con m√∫ltiples tareas: analizar documentos, responder preguntas sobre GOMARCO, explicar procesos, revisar informaci√≥n corporativa y mucho m√°s. ¬øQu√© necesitas?",
                "Mis capacidades incluyen: an√°lisis de documentos PDF/Word/Excel, respuestas sobre productos GOMARCO, informaci√≥n corporativa, y procesamiento seguro de archivos confidenciales.",
                "Estoy aqu√≠ para asistirte con cualquier consulta. Puedes cargar documentos para an√°lisis, hacer preguntas sobre la empresa, o solicitar informaci√≥n espec√≠fica sobre nuestros productos."
            }
        };

        public ServicioChatbot(IServicioArchivos servicioArchivos, ILogger<ServicioChatbot> logger)
        {
            _servicioArchivos = servicioArchivos;
            _logger = logger;
        }

        public async Task<string> ProcesarMensajeAsync(string mensaje, string idSesion, List<ArchivoSubido>? archivosContexto = null)
        {
            try
            {
                _logger.LogInformation("Procesando mensaje para sesi√≥n: {Sesion}", idSesion);

                // Simular tiempo de procesamiento
                await Task.Delay(1000);

                var mensajeLower = mensaje.ToLowerInvariant();
                
                // Verificar si hay archivos de contexto
                if (archivosContexto?.Any() == true)
                {
                    var resumenArchivos = await ProcesarMultiplesArchivosAsync(archivosContexto);
                    return GenerarRespuestaConContexto(mensaje, resumenArchivos);
                }

                // Detectar saludos
                if (EsSaludo(mensajeLower))
                {
                    return _respuestasSaludo[new Random().Next(_respuestasSaludo.Count)];
                }

                // Detectar temas espec√≠ficos
                foreach (var tema in _respuestasTematicas.Keys)
                {
                    if (mensajeLower.Contains(tema))
                    {
                        var respuestas = _respuestasTematicas[tema];
                        return respuestas[new Random().Next(respuestas.Count)];
                    }
                }

                // Respuesta general inteligente
                return GenerarRespuestaGeneral(mensaje);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error al procesar mensaje");
                return "Disculpa, he experimentado un error al procesar tu consulta. Por favor, intenta nuevamente o contacta al soporte t√©cnico.";
            }
        }

        public async Task<string> AnalizarArchivoAsync(ArchivoSubido archivo)
        {
            try
            {
                _logger.LogInformation("Analizando archivo: {Nombre}", archivo.NombreOriginal);

                // Obtener archivo temporal para an√°lisis
                var rutaTemporal = await _servicioArchivos.DescargarArchivoTemporalAsync(archivo.Id);
                
                // Simular an√°lisis del archivo basado en su tipo
                var tipoAnalisis = DeterminarTipoAnalisis(archivo.TipoContenido);
                await Task.Delay(2000); // Simular procesamiento

                var resultado = new StringBuilder();
                resultado.AppendLine($"üìÑ **An√°lisis del archivo: {archivo.NombreOriginal}**");
                resultado.AppendLine($"üìÖ Fecha de subida: {archivo.FechaSubida:dd/MM/yyyy HH:mm}");
                resultado.AppendLine($"üìä Tama√±o: {FormatearTama√±o(archivo.Tama√±oOriginal)}");
                resultado.AppendLine($"üîç Tipo: {tipoAnalisis}");
                resultado.AppendLine();

                // Agregar an√°lisis espec√≠fico seg√∫n tipo de archivo
                resultado.AppendLine(GenerarAnalisisEspecifico(archivo.TipoContenido, archivo.NombreOriginal));

                // Limpiar archivo temporal
                if (File.Exists(rutaTemporal))
                    File.Delete(rutaTemporal);

                return resultado.ToString();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error al analizar archivo: {Id}", archivo.Id);
                return $"‚ùå Error al analizar el archivo {archivo.NombreOriginal}. Por favor, verifica que el archivo no est√© corrupto.";
            }
        }

        public async Task<string> GenerarTituloConversacionAsync(string primerMensaje)
        {
            try
            {
                await Task.Delay(500); // Simular procesamiento

                var mensaje = primerMensaje.ToLowerInvariant();
                
                if (mensaje.Contains("colchon") || mensaje.Contains("cama"))
                    return "Consulta sobre Colchones";
                
                if (mensaje.Contains("precio") || mensaje.Contains("costo"))
                    return "Consulta de Precios";
                
                if (mensaje.Contains("documento") || mensaje.Contains("archivo"))
                    return "An√°lisis de Documentos";
                
                if (mensaje.Contains("proceso") || mensaje.Contains("procedimiento"))
                    return "Consulta de Procesos";

                // T√≠tulo basado en las primeras palabras
                var palabras = primerMensaje.Split(' ').Take(4);
                var titulo = string.Join(" ", palabras);
                
                return titulo.Length > 30 ? titulo.Substring(0, 30) + "..." : titulo;
            }
            catch
            {
                return "Nueva Conversaci√≥n";
            }
        }

        public async Task<bool> ValidarSeguridadArchivoAsync(string rutaArchivo)
        {
            try
            {
                var infoArchivo = new FileInfo(rutaArchivo);
                
                // Verificar tama√±o m√°ximo (100MB)
                if (infoArchivo.Length > 100 * 1024 * 1024)
                    return false;

                // Verificar extensiones permitidas
                var extensionesPermitidas = new[]
                {
                    ".pdf", ".doc", ".docx", ".xls", ".xlsx", ".ppt", ".pptx",
                    ".txt", ".csv", ".json", ".xml", ".jpg", ".jpeg", ".png", ".gif", ".bmp"
                };

                var extension = infoArchivo.Extension.ToLowerInvariant();
                if (!extensionesPermitidas.Contains(extension))
                    return false;

                // Verificar que el archivo no est√© vac√≠o
                if (infoArchivo.Length == 0)
                    return false;

                await Task.Delay(100); // Simular validaci√≥n
                return true;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error al validar seguridad del archivo: {Archivo}", rutaArchivo);
                return false;
            }
        }

        public async Task<List<string>> ObtenerSugerenciasRespuestaAsync(List<MensajeChat> contextoConversacion)
        {
            try
            {
                await Task.Delay(300); // Simular procesamiento

                var sugerencias = new List<string>();
                
                if (!contextoConversacion.Any())
                {
                    sugerencias.AddRange(new[]
                    {
                        "¬øPuedes contarme sobre los productos GOMARCO?",
                        "Necesito ayuda con un documento",
                        "¬øC√≥mo funciona el sistema de archivos seguros?"
                    });
                    return sugerencias;
                }

                var ultimoMensaje = contextoConversacion.Last();
                var contenido = ultimoMensaje.Contenido.ToLowerInvariant();

                if (contenido.Contains("colchon"))
                {
                    sugerencias.AddRange(new[]
                    {
                        "¬øQu√© modelos de colchones tienen disponibles?",
                        "Informaci√≥n sobre garant√≠as",
                        "¬øCu√°les son los precios actuales?"
                    });
                }
                else if (contenido.Contains("documento"))
                {
                    sugerencias.AddRange(new[]
                    {
                        "¬øPuedes resumir los puntos clave?",
                        "¬øHay informaci√≥n espec√≠fica que deba revisar?",
                        "Ay√∫dame a entender este proceso"
                    });
                }
                else
                {
                    sugerencias.AddRange(new[]
                    {
                        "¬øPuedes dar m√°s detalles?",
                        "¬øC√≥mo puedo proceder?",
                        "¬øHay algo m√°s que deba saber?"
                    });
                }

                return sugerencias.Take(3).ToList();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error al generar sugerencias");
                return new List<string>();
            }
        }

        public async Task<string> ProcesarMultiplesArchivosAsync(List<ArchivoSubido> archivos)
        {
            try
            {
                var resultado = new StringBuilder();
                resultado.AppendLine($"üìÅ **Procesando {archivos.Count} archivo(s) como contexto:**");
                resultado.AppendLine();

                foreach (var archivo in archivos.Take(5)) // Limitar a 5 archivos
                {
                    var resumen = await AnalizarArchivoAsync(archivo);
                    resultado.AppendLine(resumen);
                    resultado.AppendLine("---");
                }

                if (archivos.Count > 5)
                {
                    resultado.AppendLine($"‚ö†Ô∏è Se han procesado solo los primeros 5 archivos de {archivos.Count} total.");
                }

                return resultado.ToString();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error al procesar m√∫ltiples archivos");
                return "‚ùå Error al procesar los archivos de contexto.";
            }
        }

        private bool EsSaludo(string mensaje)
        {
            var saludos = new[] { "hola", "hello", "hi", "buenos", "buenas", "saludos", "hey" };
            return saludos.Any(s => mensaje.Contains(s));
        }

        private string GenerarRespuestaGeneral(string mensaje)
        {
            var respuestas = new[]
            {
                $"Entiendo tu consulta sobre '{mensaje}'. Como asistente de GOMARCO, puedo ayudarte con informaci√≥n espec√≠fica. ¬øPodr√≠as proporcionar m√°s detalles?",
                $"Gracias por tu pregunta. Para brindarte la mejor respuesta posible, ¬øpodr√≠as ser m√°s espec√≠fico sobre lo que necesitas saber?",
                $"He recibido tu consulta. Como especialista en productos GOMARCO y an√°lisis de documentos, puedo asistirte mejor si me proporcionas m√°s contexto."
            };

            return respuestas[new Random().Next(respuestas.Length)];
        }

        private string GenerarRespuestaConContexto(string mensaje, string contextoArchivos)
        {
            return $"Bas√°ndome en los documentos proporcionados y tu consulta '{mensaje}', puedo ayudarte con lo siguiente:\n\n{contextoArchivos}\n\n¬øHay algo espec√≠fico de esta informaci√≥n que te gustar√≠a explorar m√°s a fondo?";
        }

        private string DeterminarTipoAnalisis(string tipoContenido)
        {
            return tipoContenido switch
            {
                "application/pdf" => "Documento PDF",
                "application/msword" or "application/vnd.openxmlformats-officedocument.wordprocessingml.document" => "Documento de Word",
                "application/vnd.ms-excel" or "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" => "Hoja de C√°lculo",
                "application/vnd.ms-powerpoint" or "application/vnd.openxmlformats-officedocument.presentationml.presentation" => "Presentaci√≥n",
                "text/plain" => "Archivo de Texto",
                "text/csv" => "Datos CSV",
                "application/json" => "Datos JSON",
                "image/jpeg" or "image/png" or "image/gif" or "image/bmp" => "Imagen",
                _ => "Archivo de Datos"
            };
        }

        private string GenerarAnalisisEspecifico(string tipoContenido, string nombreArchivo)
        {
            return tipoContenido switch
            {
                "application/pdf" => "‚úÖ El documento PDF ha sido procesado correctamente. Contiene texto e informaci√≥n estructurada lista para consultas.",
                "application/vnd.openxmlformats-officedocument.wordprocessingml.document" => "‚úÖ Documento de Word analizado. El contenido est√° disponible para b√∫squedas y consultas espec√≠ficas.",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" => "‚úÖ Hoja de c√°lculo procesada. Los datos num√©ricos y tablas est√°n disponibles para an√°lisis.",
                "text/plain" => "‚úÖ Archivo de texto procesado. El contenido est√° indexado y listo para consultas.",
                "text/csv" => "‚úÖ Datos CSV importados correctamente. La informaci√≥n tabular est√° disponible para an√°lisis.",
                "application/json" => "‚úÖ Estructura JSON analizada. Los datos est√°n organizados y listos para consultas.",
                _ => "‚úÖ Archivo procesado exitosamente. El contenido est√° disponible como contexto para nuestras conversaciones."
            };
        }

        private static string FormatearTama√±o(long bytes)
        {
            string[] sufijos = { "B", "KB", "MB", "GB" };
            int contador = 0;
            decimal numero = bytes;
            
            while (Math.Round(numero / 1024) >= 1)
            {
                numero /= 1024;
                contador++;
            }
            
            return $"{numero:n1} {sufijos[contador]}";
        }
    }
} 